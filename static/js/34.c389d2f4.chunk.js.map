{"version":3,"file":"static/js/34.c389d2f4.chunk.js","mappings":"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","sources":["../node_modules/particles-bg/src/utils/Rand.js","../node_modules/particles-bg/src/particles/Canvas.jsx","../node_modules/particles-bg/src/utils/Color.js","../node_modules/particles-bg/src/particles/Ball.jsx","../node_modules/particles-bg/src/particles/Color.jsx","../node_modules/particles-bg/src/particles/Custom.jsx","../node_modules/particles-bg/src/particles/Lines.jsx","../node_modules/particles-bg/src/particles/Thick.jsx","../node_modules/particles-bg/src/particles/Square.jsx","../node_modules/particles-bg/src/particles/Cobweb.jsx","../node_modules/particles-bg/src/particles/Circle.jsx","../node_modules/particles-bg/src/particles/Tadpole.jsx","../node_modules/particles-bg/src/particles/Polygon.jsx","../node_modules/particles-bg/src/particles/Fountain.jsx","../node_modules/particles-bg/src/index.js","../node_modules/proton-engine/src/math/MathUtil.js","../node_modules/proton-engine/src/math/Span.js","../node_modules/proton-engine/src/utils/WebGLUtil.js","../node_modules/proton-engine/src/utils/DomUtil.js","../node_modules/proton-engine/src/utils/ImgUtil.js","../node_modules/proton-engine/src/utils/Util.js","../node_modules/proton-engine/src/utils/Puid.js","../node_modules/proton-engine/src/core/Pool.js","../node_modules/proton-engine/src/debug/Stats.js","../node_modules/proton-engine/src/events/EventDispatcher.js","../node_modules/proton-engine/src/math/Integration.js","../node_modules/proton-engine/src/core/Proton.js","../node_modules/proton-engine/src/utils/Rgb.js","../node_modules/proton-engine/src/math/ease.js","../node_modules/proton-engine/src/math/Vector2D.js","../node_modules/proton-engine/src/core/Particle.js","../node_modules/proton-engine/src/utils/ColorUtil.js","../node_modules/proton-engine/src/math/Polar2D.js","../node_modules/proton-engine/src/math/Mat3.js","../node_modules/proton-engine/src/math/ArraySpan.js","../node_modules/proton-engine/src/math/Rectangle.js","../node_modules/proton-engine/src/initialize/Rate.js","../node_modules/proton-engine/src/initialize/Initialize.js","../node_modules/proton-engine/src/initialize/Life.js","../node_modules/proton-engine/src/zone/Zone.js","../node_modules/proton-engine/src/zone/PointZone.js","../node_modules/proton-engine/src/initialize/Position.js","../node_modules/proton-engine/src/initialize/Velocity.js","../node_modules/proton-engine/src/initialize/Mass.js","../node_modules/proton-engine/src/initialize/Radius.js","../node_modules/proton-engine/src/initialize/Body.js","../node_modules/proton-engine/src/behaviour/Behaviour.js","../node_modules/proton-engine/src/behaviour/Force.js","../node_modules/proton-engine/src/behaviour/Attraction.js","../node_modules/proton-engine/src/behaviour/RandomDrift.js","../node_modules/proton-engine/src/behaviour/Gravity.js","../node_modules/proton-engine/src/behaviour/Collision.js","../node_modules/proton-engine/src/behaviour/CrossZone.js","../node_modules/proton-engine/src/behaviour/Alpha.js","../node_modules/proton-engine/src/behaviour/Scale.js","../node_modules/proton-engine/src/behaviour/Rotate.js","../node_modules/proton-engine/src/behaviour/Color.js","../node_modules/proton-engine/src/behaviour/Cyclone.js","../node_modules/proton-engine/src/behaviour/Repulsion.js","../node_modules/proton-engine/src/behaviour/GravityWell.js","../node_modules/proton-engine/src/initialize/InitializeUtil.js","../node_modules/proton-engine/src/emitter/Emitter.js","../node_modules/proton-engine/src/emitter/BehaviourEmitter.js","../node_modules/proton-engine/src/emitter/FollowEmitter.js","../node_modules/proton-engine/src/render/BaseRenderer.js","../node_modules/proton-engine/src/render/CanvasRenderer.js","../node_modules/proton-engine/src/render/DomRenderer.js","../node_modules/proton-engine/src/render/EaselRenderer.js","../node_modules/proton-engine/src/render/PixelRenderer.js","../node_modules/proton-engine/src/render/PixiRenderer.js","../node_modules/proton-engine/src/utils/MStack.js","../node_modules/proton-engine/src/render/WebGLRenderer.js","../node_modules/proton-engine/src/render/CustomRenderer.js","../node_modules/proton-engine/src/zone/LineZone.js","../node_modules/proton-engine/src/zone/CircleZone.js","../node_modules/proton-engine/src/zone/RectZone.js","../node_modules/proton-engine/src/zone/ImageZone.js","../node_modules/proton-engine/src/debug/Debug.js","../node_modules/proton-engine/src/index.js","../node_modules/raf-manager/src/RAFManager.js"],"sourcesContent":["// Code source from here, thanks author\n// https://github.com/drawcall/Proton/blob/gh-pages/source/src/utils/Rand.js\nclass Rand {\n\n  constructor() {\n      this.list = [];\n  }\n\n  set(probability, target) {\n      this.list.push({\n          probability,\n          target,\n          a: 0,\n          b: 1\n      });\n\n      this.calculation();\n  }\n\n  calculation() {\n      let total = 0;\n      for (let i = 0; i < this.list.length; i++) {\n          total += this.list[i].probability;\n      }\n\n      for (let i = 0; i < this.list.length; i++) {\n          const obj = this.list[i];\n          const val = obj.probability / total;\n\n          obj.a = i === 0 ? 0 : this.list[i - 1].b;\n          obj.b = obj.a + val;\n      }\n  }\n\n  getResult() {\n      const val = Math.random();\n      for (let i = 0; i < this.list.length; i++) {\n          const obj = this.list[i];\n\n          if (val <= obj.b && val > obj.a) {\n              return obj.target;\n          }\n      }\n\n      return this.list[0].target;\n  }\n};\n\nexport default Rand;\n","import React from \"react\";\nimport RAFManager from \"raf-manager\";\nexport default class Canvas extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this._iid = 0;\n    this._oid = 0;\n    this.size = { width: 0, height: 0 };\n    this.canvasRef = React.createRef();\n  }\n\n  componentDidMount() {\n    this._oid = setTimeout(() => {\n      this.initCanvas();\n      this.resize = this.resize.bind(this);\n      window.addEventListener(\"resize\", this.resize);\n    }, 100);\n\n    const canvas = this.getCanvas();\n    this.props.onCanvasDidMount && this.props.onCanvasDidMount(canvas);\n  }\n\n  initCanvas() {\n    const canvas = this.getCanvas();\n\n    if (this.props.globalCompositeOperation) {\n      const context = canvas.getContext(\"2d\");\n      context.globalCompositeOperation = this.props.globalCompositeOperation;\n    }\n\n    const { width, height } = this.setCanvasSize(canvas);\n    this.heartbeatDetectionCanvasSize(canvas);\n    this.props.onCanvasInited(canvas, width, height);\n  }\n\n  getCanvas(){\n    const canvas = this.canvasRef.current;\n    return canvas;\n  }\n\n  heartbeatDetectionCanvasSize(canvas) {\n    this._iid = setInterval(() => {\n      if(this.canvasRef.current){\n        const newHeight = this.canvasRef.current.clientHeight;\n        if (newHeight !== this.size.height) {\n          const { width, height } = this.setCanvasSize(canvas);\n          this.props.onResize && this.props.onResize(width, height);\n        }\n      }\n    }, 1000 / 10);\n  }\n\n  componentWillUnmount() {\n    try{\n      window.removeEventListener(\"resize\", this.resize);\n      clearInterval(this._iid);\n      clearTimeout(this._oid);\n    }catch(e){\n    }\n  }\n\n  resize() {\n    const canvas = this.getCanvas();\n    const { width, height } = this.setCanvasSize(canvas);\n    this.props.onResize && this.props.onResize(width, height);\n  }\n\n  setCanvasSize(canvas) {\n    const width = this.canvasRef.current.clientWidth;\n    const height = this.canvasRef.current.clientHeight;\n\n    this.size.width = width;\n    this.size.height = height;\n    canvas.width = width;\n    canvas.height = height;\n    return { width, height };\n  }\n\n  handleWaypointEnter() {\n    RAFManager.start();\n  }\n\n  handleWaypointLeave() {\n    RAFManager.stop();\n  }\n\n  getStyle() {\n    const { bg } = this.props;\n    let style = { width: \"100%\", height: \"100%\" };\n\n    if (bg === true) {\n      style = Object.assign(style, {\n        position: \"absolute\",\n        zIndex: -1,\n        top: 0,\n        left: 0\n      });\n    } else if(bg && typeof bg === \"object\") {\n      style = Object.assign(style, bg);\n    }\n\n    return style;\n  }\n\n  handleMouseDown(e) {\n    this.props.onMouseDown && this.props.onMouseDown(e);\n  }\n\n  render() {\n    return (\n      <canvas className=\"particles-bg-canvas-self\"\n        ref={this.canvasRef}\n        onMouseDown={this.handleMouseDown.bind(this)}\n        style={this.getStyle()}\n      />\n    );\n  }\n}\n","\nfunction hexToRgb(hex) {\n    var result = /^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i.exec(hex);\n    return result ? {\n        r: parseInt(result[1], 16),\n        g: parseInt(result[2], 16),\n        b: parseInt(result[3], 16)\n    } : {};\n}\n\nfunction getColor(color, a) {\n    let c;\n    if (color) {\n        c = hexToRgb(color);\n        return `rgba(${c.r},${c.g},${c.b}, ${a})`;\n    } else {\n        return null;\n    }\n}\n\n\nexport { hexToRgb, getColor };","import React from \"react\";\nimport Proton from \"proton-engine\";\nimport RAFManager from \"raf-manager\";\nimport Canvas from \"./Canvas.jsx\";\nimport { getColor } from \"../utils/Color\";\n\nexport default class Ball extends React.Component {\n  constructor(props) {\n    super(props);\n    this.renderProton = this.renderProton.bind(this);\n  }\n\n  onCanvasInited(canvas, width, height) {\n    this.createProton(canvas, width, height);\n    this.createMiniEmitter(canvas);\n    RAFManager.add(this.renderProton);\n  }\n\n  componentWillUnmount() {\n    try {\n      RAFManager.remove(this.renderProton);\n      this.proton.destroy();\n    } catch (e) { }\n  }\n\n  onResize() { }\n\n  createProton(canvas, width, height) {\n    const context = canvas.getContext(\"2d\");\n    this.proton = new Proton();\n\n    const emitter = new Proton.Emitter();\n    emitter.rate = new Proton.Rate(\n      this.props.num ? new Proton.Span(this.props.num) : new Proton.Span(4, 9),\n      new Proton.Span(0.8, 1.3)\n    );\n\n    emitter.addInitialize(new Proton.Mass(1));\n    emitter.addInitialize(new Proton.Radius(1, 50));\n    emitter.addInitialize(new Proton.Life(5, 6));\n    emitter.addInitialize(\n      new Proton.Velocity(\n        new Proton.Span(5, 8),\n        new Proton.Span(30, 70),\n        \"polar\"\n      )\n    );\n\n    emitter.addBehaviour(new Proton.Alpha(1, 0));\n    emitter.addBehaviour(\n      new Proton.Color([\"#36aaf3\", \"#fd769c\", \"#94ff22\", \"#ffa545\", \"#ffffff\"])\n    );\n    emitter.addBehaviour(new Proton.Scale(0.7, 1));\n    emitter.addBehaviour(new Proton.Gravity(3));\n    emitter.addBehaviour(new Proton.Collision(emitter));\n    emitter.addBehaviour(this.customDeadBehaviour(canvas));\n    emitter.addBehaviour(\n      new Proton.CrossZone(\n        new Proton.RectZone(0, 0, canvas.width, canvas.height),\n        \"bound\"\n      )\n    );\n\n    emitter.p.x = Math.min(500, Math.max(canvas.width / 2 - 400, 50));\n    emitter.p.y = canvas.height / 2 + 50;\n    emitter.emit();\n    this.proton.addEmitter(emitter);\n\n    const renderer = new Proton.CanvasRenderer(canvas);\n    renderer.onProtonUpdate =  ()=> {\n      context.fillStyle = getColor(this.props.color, 0.2) || \"rgba(255, 255, 255, 0.2)\";\n      context.fillRect(0, 0, canvas.width, canvas.height);\n    };\n    this.proton.addRenderer(renderer);\n  }\n\n  customDeadBehaviour(canvas) {\n    return {\n      initialize: function (particle) { },\n      applyBehaviour: particle => {\n        if (particle.p.y + particle.radius >= canvas.height) {\n          if (particle.radius > 9) {\n            this.miniEmitteing(particle);\n            particle.dead = true;\n          }\n        }\n      }\n    };\n  }\n\n  createMiniEmitter(canvas) {\n    const miniEmitter = new Proton.Emitter();\n    miniEmitter.rate = new Proton.Rate(\n      new Proton.Span(3, 6),\n      new Proton.Span(1, 2)\n    );\n\n    miniEmitter.addInitialize(new Proton.Mass(1));\n    miniEmitter.radiusInitialize = new Proton.Radius();\n    miniEmitter.addInitialize(miniEmitter.radiusInitialize);\n    miniEmitter.addInitialize(new Proton.Life(0.5, 1));\n    miniEmitter.addInitialize(\n      new Proton.V(\n        new Proton.Span(1.5, 3),\n        new Proton.Span(0, 70, true),\n        \"polar\"\n      )\n    );\n\n    miniEmitter.colorBehaviour = new Proton.Color(\"#ffffff\");\n    miniEmitter.addBehaviour(new Proton.Alpha(1, 0));\n    miniEmitter.addBehaviour(miniEmitter.colorBehaviour);\n    miniEmitter.addBehaviour(new Proton.Gravity(4));\n    miniEmitter.addBehaviour(new Proton.Collision(miniEmitter));\n    miniEmitter.addBehaviour(\n      new Proton.CrossZone(\n        new Proton.RectZone(0, 0, canvas.width, canvas.height),\n        \"bound\"\n      )\n    );\n    this.proton.addEmitter(miniEmitter);\n\n    this.miniEmitter = miniEmitter;\n  }\n\n  miniEmitteing(particle) {\n    const miniEmitter = this.miniEmitter;\n    miniEmitter.radiusInitialize.reset(\n      particle.radius * 0.05,\n      particle.radius * 0.2\n    );\n    miniEmitter.colorBehaviour.reset(particle.color);\n    miniEmitter.p.x = particle.p.x;\n    miniEmitter.p.y = particle.p.y;\n    miniEmitter.emit(\"once\");\n  }\n\n  renderProton() {\n    this.proton && this.proton.update();\n  }\n\n  render() {\n    return (\n      <Canvas bg={this.props.bg}\n        globalCompositeOperation=\"darker\"\n        onCanvasInited={this.onCanvasInited.bind(this)}\n        onResize={this.onResize.bind(this)}\n      />\n    );\n  }\n}\n","import React from \"react\";\nimport Proton from \"proton-engine\";\nimport RAFManager from \"raf-manager\";\nimport Canvas from \"./Canvas.jsx\";\n\nexport default class Color extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.colors = [\n      \"#529B88\",\n      \"#CDD180\",\n      \"#FFFA32\",\n      \"#FB6255\",\n      \"#FB4A53\",\n      \"#FF4E50\",\n      \"#F9D423\"\n    ];\n    this.renderProton = this.renderProton.bind(this);\n  }\n\n  componentWillUnmount() {\n    try {\n      RAFManager.remove(this.renderProton);\n      this.proton.destroy();\n    } catch (e) {}\n  }\n\n  onCanvasInited(canvas, width, height) {\n    this.createProton(canvas, width, height);\n    RAFManager.add(this.renderProton);\n  }\n\n  onResize() {}\n\n  createProton(canvas, width, height) {\n    this.proton = new Proton();\n    const emitter = new Proton.Emitter();\n    emitter.rate = new Proton.Rate(\n      this.props.num ? new Proton.Span(this.props.num) : new Proton.Span(5, 8),\n      new Proton.Span(0.1, 0.25)\n    );\n\n    emitter.addInitialize(new Proton.Mass(1));\n    emitter.addInitialize(new Proton.Radius(20, 200));\n    emitter.addInitialize(new Proton.Life(2, 4));\n    emitter.addInitialize(\n      new Proton.Position(new Proton.RectZone(0, 0, width, height))\n    );\n\n    emitter.addBehaviour(new Proton.Alpha(0, 1, Infinity, Proton.easeOutCubic));\n    emitter.addBehaviour(new Proton.Scale(1, 0, Infinity, Proton.easeOutCubic));\n    emitter.addBehaviour(new Proton.Color(this.colors, \"random\"));\n\n    emitter.emit();\n    this.proton.addEmitter(emitter);\n\n    const renderer = new Proton.CanvasRenderer(canvas);\n    this.proton.addRenderer(renderer);\n  }\n\n  renderProton() {\n    this.proton && this.proton.update();\n  }\n\n  render() {\n    return (\n      <Canvas bg={this.props.bg}\n        globalCompositeOperation=\"darker\"\n        onCanvasInited={this.onCanvasInited.bind(this)}\n        onResize={this.onResize.bind(this)}\n      />\n    );\n  }\n}\n","import React from \"react\";\nimport Proton from \"proton-engine\";\nimport RAFManager from \"raf-manager\";\nimport Canvas from \"./Canvas.jsx\";\n\nexport default class Color extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.colors = [\n            \"#529B88\",\n            \"#CDD180\",\n            \"#FFFA32\",\n            \"#FB6255\",\n            \"#FB4A53\",\n            \"#FF4E50\",\n            \"#F9D423\"\n        ];\n        this.renderProton = this.renderProton.bind(this);\n    }\n\n    componentWillUnmount() {\n        try {\n            RAFManager.remove(this.renderProton);\n            this.proton.destroy();\n        } catch (e) { }\n    }\n\n    onCanvasInited(canvas, width, height) {\n        this.createProton(canvas, width, height);\n        RAFManager.add(this.renderProton);\n    }\n\n    onResize(width, height) {\n        this.crossZoneBehaviour.zone.width = width;\n        this.crossZoneBehaviour.zone.height = height;\n        this.proton.renderers[0].resize(width, height);;\n    }\n\n    getProp(key, defaultVal) {\n        const config = this.props.config || {};\n        const val = config[key] || defaultVal;\n        if (Array.isArray(val)) {\n            return new Proton.Span(val[0], val[1]);\n        } else {\n            return val;\n        }\n    }\n\n    getArrProp(key, defaultVal) {\n        const config = this.props.config || {};\n        const val = config[key] || defaultVal;\n        if (!val) return null;\n\n        if (Array.isArray(val)) {\n            return val;\n        } else {\n            return [val, val];\n        }\n    }\n\n    createProton(canvas, width, height) {\n        const num = this.getProp(\"num\", [5, 8]);\n        const rps = this.getProp(\"rps\", [0.1, 0.2]);\n        const mass = this.getProp(\"mass\", 1);\n        const radius = this.getProp(\"radius\", [10, 30]);\n        const life = this.getProp(\"life\", [2, 3]);\n        const body = this.getProp(\"body\");\n        const position = this.getProp(\"position\");\n        const v = this.getProp(\"v\", [2, 3]);\n        const tha = this.getProp(\"tha\", [-15, 15]);\n        const alpha = this.getArrProp(\"alpha\");\n        const scale = this.getArrProp(\"scale\");\n        const color = this.getArrProp(\"color\");\n        const cross = this.getProp(\"cross\", \"dead\");\n        const random = this.getProp(\"random\");\n        const rotate = this.getArrProp(\"rotate\");\n        const g = this.getProp(\"g\");\n        const f = this.getArrProp(\"f\");\n        const emitterV = this.getProp(\"emitter\");\n\n        this.proton = new Proton();\n        let emitter;\n        if (emitterV === \"follow\") {\n            emitter = new Proton.FollowEmitter();\n        } else {\n            emitter = new Proton.Emitter();\n        }\n        emitter.rate = new Proton.Rate(num, rps);\n\n        emitter.addInitialize(new Proton.Mass(mass));\n        emitter.addInitialize(new Proton.Radius(radius));\n        emitter.addInitialize(new Proton.Life(life));\n        emitter.addInitialize(new Proton.Velocity(v, tha, \"polar\"));\n        if (body) emitter.addInitialize(new Proton.Body(body));\n\n        let pos;\n        if (position === \"all\" || position === \"screen\") {\n            pos = new Proton.Position(new Proton.RectZone(0, 0, canvas.width, canvas.height))\n        } else if (typeof position === \"object\") {\n            pos = new Proton.Position(new Proton.RectZone(position.x, position.y, position.width, position.height))\n        } else {\n            emitter.p.x = canvas.width / 2;\n            emitter.p.y = canvas.height / 2;\n        }\n\n        emitter.addInitialize(pos);\n\n        /// behaviour\n        const alphaB = alpha ? new Proton.Alpha(alpha[0], alpha[1]) : new Proton.Alpha(0, 1);\n        const scaleB = scale ? new Proton.Scale(scale[0], scale[1]) : new Proton.Scale(1, 0.2);\n        const colorB = color ? new Proton.Color(color[0], color[1]) : new Proton.Color(this.colors);\n\n        emitter.addBehaviour(alphaB);\n        emitter.addBehaviour(scaleB);\n        if(!body) emitter.addBehaviour(colorB);\n\n        if(rotate){\n            if(rotate[0]===true||rotate[0]===\"rotate\"){\n                emitter.addBehaviour(new Proton.Rotate());\n            }else{\n                emitter.addBehaviour(new Proton.Rotate(rotate[0], rotate[1]));\n            }\n        }\n\n        const zone = new Proton.RectZone(0, 0, canvas.width, canvas.height)\n        const crossZoneBehaviour = new Proton.CrossZone(zone, cross);\n        emitter.addBehaviour(crossZoneBehaviour);\n\n        random && emitter.addBehaviour(new Proton.RandomDrift(random, random, 0.05));\n        g && emitter.addBehaviour(new Proton.G(g));\n        f && emitter.addBehaviour(new Proton.F(f[0], f[1]));\n\n        emitter.emit();\n        this.proton.addEmitter(emitter);\n\n        const renderer = this.createRenderer(canvas);\n        this.proton.addRenderer(renderer);\n\n        this.emitter = emitter;\n        this.crossZoneBehaviour = crossZoneBehaviour;\n    }\n\n    createRenderer(canvas) {\n        const width = canvas.width;\n        const height = canvas.height;\n        const context = canvas.getContext(\"2d\");\n        const renderer = new Proton.CanvasRenderer(canvas);\n\n        const onUpdate = this.getProp(\"onUpdate\");\n        if (onUpdate) {\n            renderer.onProtonUpdate = () => {\n                onUpdate(context, width, height);\n            };\n        }\n\n        const onParticleCreated = this.getProp(\"onParticleCreated\");\n        if (onParticleCreated) {\n            renderer.onParticleCreated = (particle) => {\n                onParticleCreated(context, particle);\n            };\n        }\n\n        const onParticleUpdate = this.getProp(\"onParticleUpdate\");\n        if (onParticleUpdate) {\n            renderer.onParticleUpdate = (particle) => {\n                onParticleUpdate(context, particle);\n            };\n        }\n\n        return renderer;\n    }\n\n    renderProton() {\n        this.proton && this.proton.update();\n    }\n\n    handleMouseDown(e) {\n        const onMouseDown = this.getProp(\"onMouseDown\");\n        if (onMouseDown) {\n            onMouseDown(e);\n        }\n    }\n\n    render() {\n        const globalCompositeOperation = this.props.globalCompositeOperation || this.props.operation || \"source-over\";\n\n        return (\n            <Canvas\n                bg={this.props.bg}\n                onMouseDown={this.handleMouseDown.bind(this)}\n                globalCompositeOperation={globalCompositeOperation}\n                onCanvasInited={this.onCanvasInited.bind(this)}\n                onResize={this.onResize.bind(this)}\n            />\n        );\n    }\n}\n","import React from \"react\";\nimport Proton from \"proton-engine\";\nimport RAFManager from \"raf-manager\";\nimport Canvas from \"./Canvas.jsx\";\nimport { getColor } from \"../utils/Color\";\n\nexport default class Lines extends React.Component {\n  constructor(props) {\n    super(props);\n    this.renderProton = this.renderProton.bind(this);\n  }\n\n  onCanvasDidMount(canvas){\n    if(this.props.color){\n      canvas.style.backgroundColor = this.props.color;\n    }\n  }\n\n  componentWillUnmount() {\n    try {\n      RAFManager.remove(this.renderProton);\n      this.proton.destroy();\n    } catch (e) { }\n  }\n\n  onCanvasInited(canvas, width, height) {\n    this.createProton(canvas, width, height);\n    RAFManager.add(this.renderProton);\n  }\n\n  onResize(width, height) {\n    this.crossZoneBehaviour.zone.width = width;\n    this.crossZoneBehaviour.zone.height = height;\n    this.proton.renderers[0].resize(width, height);\n  }\n\n  createProton(canvas, width, height) {\n    this.proton = new Proton();\n\n    const emitter = new Proton.Emitter();\n    emitter.damping = 0.008;\n    emitter.rate = new Proton.Rate(this.props.num ? this.props.num : 250);\n    emitter.addInitialize(new Proton.Mass(1));\n    emitter.addInitialize(new Proton.Radius(4));\n    emitter.addInitialize(\n      new Proton.Velocity(\n        new Proton.Span(1.5),\n        new Proton.Span(0, 360),\n        \"polar\"\n      )\n    );\n    const mouseObj = {\n      x: width / 2,\n      y: height / 2\n    };\n\n    const attractionBehaviour = new Proton.Attraction(mouseObj, 0, 0);\n    const crossZoneBehaviour = new Proton.CrossZone(\n      new Proton.RectZone(0, 0, canvas.width, canvas.height),\n      \"cross\"\n    );\n    emitter.addBehaviour(new Proton.Color(\"random\"));\n    emitter.addBehaviour(attractionBehaviour, crossZoneBehaviour);\n    emitter.addBehaviour(new Proton.RandomDrift(10, 10, 0.05));\n    emitter.p.x = canvas.width / 2;\n    emitter.p.y = canvas.height / 2;\n    emitter.emit(\"once\");\n\n    this.proton.addEmitter(emitter);\n    this.proton.addRenderer(this.createRenderer(canvas));\n    this.crossZoneBehaviour = crossZoneBehaviour;\n  }\n\n  createRenderer(canvas) {\n    const context = canvas.getContext(\"2d\");\n    const renderer = new Proton.CanvasRenderer(canvas);\n    renderer.onProtonUpdate = () => {\n      context.fillStyle = getColor(this.props.color, 0.02) || \"rgba(0, 0, 0, 0.02)\";\n      context.fillRect(0, 0, canvas.width, canvas.height);\n    };\n\n    renderer.onParticleUpdate = function (particle) {\n      context.beginPath();\n      context.strokeStyle = particle.color;\n      context.lineWidth = 1;\n      context.moveTo(particle.old.p.x, particle.old.p.y);\n      context.lineTo(particle.p.x, particle.p.y);\n      context.closePath();\n      context.stroke();\n    };\n\n    return renderer;\n  }\n\n  renderProton() {\n    this.proton && this.proton.update();\n  }\n\n  render() {\n    return (\n      <Canvas bg={this.props.bg}\n        globalCompositeOperation=\"darker\"\n        onCanvasDidMount={this.onCanvasDidMount.bind(this)}\n        onCanvasInited={this.onCanvasInited.bind(this)}\n        onResize={this.onResize.bind(this)}\n      />\n    );\n  }\n}\n","import React from \"react\";\nimport Proton from \"proton-engine\";\nimport RAFManager from \"raf-manager\";\nimport Canvas from \"./Canvas.jsx\";\nimport { getColor } from \"../utils/Color\";\n\nexport default class Thick extends React.Component {\n  constructor(props) {\n    super(props);\n    this.hue = 0;\n    this.index = 0;\n    this.colorTemplate = `hsla(hue,80%,50%, 0.75)`;\n    this.renderProton = this.renderProton.bind(this);\n  }\n\n  onCanvasDidMount(canvas){\n    if(this.props.color){\n      canvas.style.backgroundColor = this.props.color;\n    }\n  }\n\n  onCanvasInited(canvas, width, height) {\n    this.canvas = canvas;\n    this.createProton(canvas, width, height);\n    RAFManager.add(this.renderProton);\n  }\n\n  onResize(width, height) {\n    this.crossZoneBehaviour.zone.width = width;\n    this.crossZoneBehaviour.zone.height = height;\n    this.proton.renderers[0].resize(width, height);\n  }\n\n  createProton(canvas, width, height) {\n    this.proton = new Proton();\n\n    const emitter = new Proton.Emitter();\n    emitter.damping = 0.008;\n    emitter.rate = new Proton.Rate(this.props.num ? this.props.num : 150);\n\n    // Initialize\n    emitter.addInitialize(new Proton.Mass(1));\n    emitter.addInitialize(new Proton.Radius(8));\n    emitter.addInitialize(\n      new Proton.V(new Proton.Span(0.1, 0.5), new Proton.Span(0, 360), \"polar\")\n    );\n    emitter.addInitialize(\n      new Proton.Position(\n        new Proton.CircleZone(canvas.width / 2, canvas.height / 2, 100)\n      )\n    );\n\n    // Behaviour\n    const crossZoneBehaviour = new Proton.CrossZone(\n      new Proton.RectZone(0, 0, canvas.width, canvas.height),\n      \"cross\"\n    );\n    emitter.addBehaviour(crossZoneBehaviour);\n    this.repulsion = new Proton.Repulsion(\n      {\n        x: canvas.width / 2,\n        y: canvas.height / 2 - 100\n      },\n      3,\n      300\n    );\n\n    this.attraction = new Proton.Attraction(\n      {\n        x: canvas.width / 2,\n        y: canvas.height / 2\n      },\n      3,\n      200\n    );\n    emitter.addBehaviour(this.attraction, this.repulsion);\n    emitter.addBehaviour(new Proton.Color(\"random\"));\n    emitter.addBehaviour(new Proton.RandomDrift(20, 15, 0.15));\n\n    emitter.emit(\"once\");\n    this.proton.addEmitter(emitter);\n    this.proton.addRenderer(this.createRenderer(canvas));\n    this.crossZoneBehaviour = crossZoneBehaviour;\n  }\n\n  createRenderer(canvas) {\n    const context = canvas.getContext(\"2d\");\n    const renderer = new Proton.CanvasRenderer(canvas);\n\n    renderer.onProtonUpdate = () => {\n      this.hue += 1;\n      context.fillStyle = getColor(this.props.color, 0.02) || \"rgba(0, 0, 0, 0.02)\";\n      context.fillRect(0, 0, canvas.width, canvas.height);\n    };\n\n    renderer.onParticleCreated = particle => {\n      particle.data.begin = Proton.MathUtil.randomAToB(1, 120);\n      particle.data.tha = Proton.MathUtil.randomAToB(0, Math.PI * 2);\n    };\n\n    renderer.onParticleUpdate = particle => {\n      const hue = particle.data.begin + this.hue;\n      particle.color = this.colorTemplate.replace(\"hue\", hue % 360);\n\n      const ratio = 3 / 4;\n      const radius =\n        particle.radius * (1 - ratio) * Math.cos((particle.data.tha += 0.01)) +\n        particle.radius * ratio;\n\n      context.beginPath();\n      context.fillStyle = particle.color;\n      context.arc(particle.p.x, particle.p.y, radius, 0, Math.PI * 2, true);\n      context.closePath();\n      context.fill();\n    };\n\n    return renderer;\n  }\n\n  componentWillUnmount() {\n    try {\n      RAFManager.remove(this.renderProton);\n      this.proton.destroy();\n    } catch (e) {}\n  }\n\n  renderProton() {\n    const canvas = this.canvas;\n    this.proton.update();\n    if (this.index % 200 === 0) {\n      this.attraction.targetPosition.x = Math.random() * canvas.width;\n      this.attraction.targetPosition.y = Math.random() * canvas.height;\n\n      this.repulsion.targetPosition.x = Math.random() * canvas.width;\n      this.repulsion.targetPosition.y = Math.random() * canvas.height;\n    }\n\n    this.index++;\n  }\n\n  render() {\n    return (\n      <Canvas bg={this.props.bg}\n        onCanvasDidMount={this.onCanvasDidMount.bind(this)}\n        onCanvasInited={this.onCanvasInited.bind(this)}\n        onResize={this.onResize.bind(this)}\n      />\n    );\n  }\n}\n","import React from \"react\";\nimport Proton from \"proton-engine\";\nimport RAFManager from \"raf-manager\";\nimport Canvas from \"./Canvas.jsx\";\n\nexport default class Square extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.colors = [\n      \"#fad390\",\n      \"#81ecec\",\n      \"#ffffff\",\n      \"#badc58\",\n      \"#f9ca24\",\n      \"#FEA47F\"\n    ];\n    this.renderProton = this.renderProton.bind(this);\n  }\n\n  componentWillUnmount() {\n    try {\n      RAFManager.remove(this.renderProton);\n      this.proton.destroy();\n    } catch (e) {}\n  }\n\n  onCanvasDidMount(canvas) {\n    \n  }\n\n  onCanvasInited(canvas, width, height) {\n    this.createProton(canvas, width, height);\n    RAFManager.add(this.renderProton);\n  }\n\n  onResize(width, height) {\n    const dis = 150;\n    this.crossZoneBehaviour.zone.width = width + 2 * dis;\n    this.crossZoneBehaviour.zone.height = height + 2 * dis;\n    this.proton.renderers[0].resize(width, height);\n  }\n\n  createProton(canvas, width, height) {\n    this.proton = new Proton();\n    const emitter = new Proton.Emitter();\n    emitter.rate = new Proton.Rate(this.props.num ? this.props.num : 50);\n    emitter.damping = 0;\n\n    emitter.addInitialize(new Proton.Mass(1));\n    emitter.addInitialize(new Proton.Radius(4, 70));\n    emitter.addInitialize(\n      new Proton.Velocity(new Proton.Span(2, 10), new Proton.Span(0), \"polar\")\n    );\n    emitter.addInitialize(\n      new Proton.Position(\n        new Proton.LineZone(0, canvas.height, canvas.width, canvas.height)\n      )\n    );\n\n    const dis = 150;\n    const crossZoneBehaviour = new Proton.CrossZone(\n      new Proton.RectZone(\n        0 - dis,\n        0 - dis,\n        canvas.width + 2 * dis,\n        canvas.height + 2 * dis\n      ),\n      \"cross\"\n    );\n    emitter.addBehaviour(crossZoneBehaviour);\n    emitter.addBehaviour(new Proton.Alpha(Proton.getSpan(0.1, 0.55)));\n    emitter.addBehaviour(new Proton.Color(this.colors));\n\n    emitter.emit(\"once\");\n    this.proton.addEmitter(emitter);\n    const renderer = this.createRenderer(canvas);\n    this.proton.addRenderer(renderer);\n\n    this.crossZoneBehaviour = crossZoneBehaviour;\n    emitter.preEmit(2);\n  }\n\n  createRenderer(canvas) {\n    const context = canvas.getContext(\"2d\");\n    const renderer = new Proton.CustomRenderer();\n\n    renderer.onProtonUpdate = () => {\n      context.clearRect(0, 0, canvas.width, canvas.height);\n    };\n\n    renderer.onParticleCreated = particle => {\n      const w = particle.radius || 60;\n      const h = Proton.MathUtil.randomAToB(100, 200, \"int\");\n      particle.data.w = w;\n      particle.data.h = h;\n    };\n\n    renderer.onParticleUpdate = particle => {\n      const w = particle.data.w;\n      const h = particle.data.h;\n      context.save();\n      context.globalAlpha = particle.alpha;\n      context.fillStyle = particle.color;\n\n      context.translate(particle.p.x, particle.p.y);\n      context.rotate(Proton.MathUtil.degreeTransform(particle.rotation));\n      context.translate(-particle.p.x, -particle.p.y);\n\n      context.beginPath();\n      context.rect(particle.p.x - w / 2, particle.p.y - h / 2, w, h);\n\n      context.closePath();\n      context.fill();\n      context.globalAlpha = 1;\n      context.restore();\n    };\n\n    return renderer;\n  }\n\n  renderProton() {\n    this.proton && this.proton.update();\n  }\n\n  render() {\n    return (\n      <Canvas bg={this.props.bg}\n        globalCompositeOperation=\"lighter\"\n        onCanvasDidMount={this.onCanvasDidMount.bind(this)}\n        onCanvasInited={this.onCanvasInited.bind(this)}\n        onResize={this.onResize.bind(this)}\n      />\n    );\n  }\n}\n","import React from \"react\";\nimport Proton from \"proton-engine\";\nimport RAFManager from \"raf-manager\";\nimport Canvas from \"./Canvas.jsx\";\nimport { getColor } from \"../utils/Color\";\n\nexport default class Cobweb extends React.Component {\n  constructor(props) {\n    super(props);\n    this.renderProton = this.renderProton.bind(this);\n  }\n\n  onCanvasInited(canvas, width, height) {\n    this.createProton(canvas, width, height);\n    RAFManager.add(this.renderProton);\n  }\n\n  componentWillUnmount() {\n    try {\n      RAFManager.remove(this.renderProton);\n      this.proton.destroy();\n    } catch (e) {}\n  }\n\n  onResize(width, height) {\n    this.crossZoneBehaviour.zone.width = width;\n    this.crossZoneBehaviour.zone.height = height;\n    this.proton.renderers[0].resize(width, height);\n  }\n\n  createProton(canvas, width, height) {\n    this.proton = new Proton();\n\n    const emitter = new Proton.Emitter();\n    emitter.rate = new Proton.Rate(\n      this.props.num ? new Proton.Span(this.props.num) : new Proton.Span(100),\n      new Proton.Span(0.05, 0.2)\n    );\n\n    emitter.addInitialize(new Proton.Mass(1));\n    emitter.addInitialize(new Proton.Radius(1, 4));\n    emitter.addInitialize(new Proton.Life(Infinity));\n\n    const pointZone = new Proton.Position(\n      new Proton.RectZone(0, 0, width, height)\n    );\n    emitter.addInitialize(pointZone);\n    emitter.addInitialize(\n      new Proton.Velocity(\n        new Proton.Span(0.3, 0.6),\n        new Proton.Span(0, 360),\n        \"polar\"\n      )\n    );\n\n    emitter.addBehaviour(new Proton.Alpha(Proton.getSpan(0.2, 0.9)));\n    emitter.addBehaviour(new Proton.Color(this.props.color || \"#333\"));\n    this.crossZoneBehaviour = new Proton.CrossZone(\n      new Proton.RectZone(0, 0, width, height),\n      \"cross\"\n    );\n    emitter.addBehaviour(this.crossZoneBehaviour);\n\n    emitter.emit(\"once\");\n    emitter.damping = 0;\n    this.proton.addEmitter(emitter);\n    this.proton.addRenderer(this.createRenderer(canvas, emitter));\n  }\n\n  createRenderer(canvas, emitter) {\n    const context = canvas.getContext(\"2d\");\n    const renderer = new Proton.CanvasRenderer(canvas);\n    const R = 140;\n\n    renderer.onProtonUpdateAfter = ()=> {\n      let particles = emitter.particles;\n\n      for (let i = 0; i < particles.length; i++) {\n        for (let j = i + 1; j < particles.length; j++) {\n          let pA = particles[i];\n          let pB = particles[j];\n          let dis = pA.p.distanceTo(pB.p);\n\n          if (dis < R) {\n            let alpha = (1 - dis / R) * 0.5;\n            context.strokeStyle = getColor(this.props.color, alpha) || `rgba(3, 3, 3, ${alpha})`;\n            context.beginPath();\n            context.moveTo(pA.p.x, pA.p.y);\n            context.lineTo(pB.p.x, pB.p.y);\n            context.closePath();\n            context.stroke();\n          }\n        }\n      }\n    };\n\n    return renderer;\n  }\n\n  renderProton() {\n    this.proton && this.proton.update();\n  }\n\n  render() {\n    return (\n      <Canvas bg={this.props.bg}\n        globalCompositeOperation=\"darker\"\n        onCanvasInited={this.onCanvasInited.bind(this)}\n        onResize={this.onResize.bind(this)}\n      />\n    );\n  }\n}\n","import React from \"react\";\nimport Proton from \"proton-engine\";\nimport RAFManager from \"raf-manager\";\nimport Canvas from \"./Canvas.jsx\";\n\nexport default class Circle extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.colors = [\n      \"#74b9ff\",\n      \"#e84393\",\n      \"#6c5ce7\",\n      \"#00b894\",\n      \"#fdcb6e\",\n      \"#006266\",\n      \"#1B1464\"\n    ];\n\n    this.renderProton = this.renderProton.bind(this);\n  }\n\n  componentWillUnmount() {\n    try {\n      RAFManager.remove(this.renderProton);\n      this.proton.destroy();\n    } catch (e) { }\n  }\n\n  onCanvasInited(canvas, width, height) {\n    this.createProton(canvas, width, height);\n    RAFManager.add(this.renderProton);\n  }\n\n  onResize(width, height) {\n    this.crossZoneBehaviour.zone.width = width;\n    this.crossZoneBehaviour.zone.height = height;\n    this.proton.renderers[0].resize(width, height);\n  }\n\n  createProton(canvas, width, height) {\n    this.proton = new Proton();\n\n    const emitter = new Proton.Emitter();\n    emitter.rate = new Proton.Rate(this.props.num || 20);\n    emitter.damping = 0.008;\n\n    emitter.addInitialize(new Proton.Mass(1));\n    emitter.addInitialize(new Proton.Radius(30, 600));\n    emitter.addInitialize(\n      new Proton.Velocity(\n        new Proton.Span(0.5),\n        new Proton.Span(0, 360),\n        \"polar\"\n      )\n    );\n    emitter.addInitialize(\n      new Proton.Position(\n        new Proton.RectZone(0, 0, canvas.width, canvas.height)\n      )\n    );\n\n    const crossZoneBehaviour = new Proton.CrossZone(\n      new Proton.RectZone(0, 0, canvas.width, canvas.height),\n      \"cross\"\n    );\n    emitter.addBehaviour(crossZoneBehaviour);\n    emitter.addBehaviour(new Proton.Alpha(Proton.getSpan(0.35, 0.55)));\n    emitter.addBehaviour(new Proton.Color(this.getColor()));\n    emitter.addBehaviour(new Proton.RandomDrift(50, 50, 0.5));\n\n    emitter.emit(\"once\");\n    this.proton.addEmitter(emitter);\n\n    const renderer = new Proton.CanvasRenderer(canvas);\n    this.proton.addRenderer(renderer);\n\n    this.crossZoneBehaviour = crossZoneBehaviour;\n  }\n\n  getColor() {\n    let c = this.colors;\n    if (this.props.color) {\n      if(Array.isArray(this.props.color)){\n        c = this.props.color;\n      }else{\n        c = [this.props.color];\n      }\n    }\n\n    return c;\n  }\n\n  renderProton() {\n    this.proton && this.proton.update();\n  }\n\n  render() {\n    return (\n      <Canvas bg={this.props.bg}\n        globalCompositeOperation=\"darken\"\n        onCanvasInited={this.onCanvasInited.bind(this)}\n        onResize={this.onResize.bind(this)}\n      />\n    );\n  }\n}\n","import React from \"react\";\nimport Proton from \"proton-engine\";\nimport RAFManager from \"raf-manager\";\nimport Canvas from \"./Canvas.jsx\";\n\nexport default class Tadpole extends React.Component {\n  constructor(props) {\n    super(props);\n    this.renderProton = this.renderProton.bind(this);\n  }\n\n  onCanvasDidMount(canvas) {\n\n  }\n\n  onCanvasInited(canvas, width, height) {\n    this.createProton(canvas, width, height);\n    this.renderProton();\n  }\n\n  onResize(width, height) {\n    this.crossZoneBehaviour.zone.width = width;\n    this.crossZoneBehaviour.zone.height = height;\n    this.proton.renderers[0].resize(width, height);\n  }\n\n  createProton(canvas, width, height) {\n    this.proton = new Proton();\n\n    const emitter = new Proton.Emitter();\n    emitter.damping = 0.008;\n    emitter.rate = new Proton.Rate(this.props.num ? this.props.num : 50);\n    emitter.addInitialize(new Proton.Mass(1));\n    emitter.addInitialize(new Proton.Radius(5, 9));\n    emitter.addInitialize(\n      new Proton.Velocity(\n        new Proton.Span(1.5),\n        new Proton.Span(0, 360),\n        \"polar\"\n      )\n    );\n    emitter.addInitialize(\n      new Proton.Position(new Proton.RectZone(0, 0, width, height))\n    );\n\n    const mouseInfo = {\n      x: width / 2,\n      y: height / 2\n    };\n\n    const attractionBehaviour = new Proton.Attraction(mouseInfo, 0, 0);\n    const crossZoneBehaviour = new Proton.CrossZone(\n      new Proton.RectZone(0, 0, canvas.width, canvas.height),\n      \"bound\"\n    );\n    emitter.addBehaviour(new Proton.Color(this.props.color || \"#bbb\"));\n    //emitter.addBehaviour(new Proton.Alpha(new Proton.Span(0.5, 1)));\n    emitter.addBehaviour(attractionBehaviour, crossZoneBehaviour);\n    emitter.addBehaviour(new Proton.RandomDrift(15, 15, 0.05));\n    emitter.emit(\"once\");\n\n    this.proton.addEmitter(emitter);\n    this.proton.addRenderer(this.createRenderer(canvas));\n    this.crossZoneBehaviour = crossZoneBehaviour;\n  }\n\n  createRenderer(canvas) {\n    const jointCount = 10;\n    const delayTime = 8;\n    const context = canvas.getContext(\"2d\");\n    const renderer = new Proton.CanvasRenderer(canvas);\n\n    renderer.onProtonUpdate = function () {\n      context.clearRect(0, 0, canvas.width, canvas.height);\n    };\n\n    renderer.onParticleCreated = particle => {\n      particle.data.points = [];\n      particle.data.index = 0;\n    };\n\n    renderer.onParticleUpdate = function (particle) {\n      drawTadpoleTail(particle);\n      if (particle.data.index % delayTime === 0) fillPointsData(particle);\n      drawTadpoleHead(particle);\n      particle.data.index++;\n    };\n\n    const fillPointsData = particle => {\n      particle.data.points.unshift(particle.p.y);\n      particle.data.points.unshift(particle.p.x);\n\n      if (particle.data.points.length > jointCount) {\n        particle.data.points.pop();\n        particle.data.points.pop();\n      }\n    };\n\n    const drawTadpoleHead = particle => {\n      context.fillStyle = particle.color;\n      context.beginPath();\n      context.arc(\n        particle.p.x,\n        particle.p.y,\n        particle.radius,\n        0,\n        Math.PI * 2,\n        true\n      );\n      context.closePath();\n      context.fill();\n    };\n\n    const drawTadpoleTail = particle => {\n      context.beginPath();\n      context.strokeStyle = particle.color;\n\n      context.moveTo(particle.p.x, particle.p.y);\n\n      const l = particle.data.points.length;\n      for (let i = 0; i < l; i += 2) {\n        const x = particle.data.points[i];\n        const y = particle.data.points[i + 1];\n\n        context.lineWidth = linearEvaluation(i, l);\n        context.lineTo(x, y);\n        context.stroke();\n      }\n    };\n\n    const linearEvaluation = (i, l) => {\n      if (l <= 2) return 1;\n\n      const max = 6;\n      const A = (max - 1) / (2 / l - 1);\n      const B = 1 - A;\n      const X = (i + 2) / l;\n      let val = A * X + B;\n      val = val >> 0;\n\n      return val;\n    };\n\n    return renderer;\n  }\n\n  renderProton() {\n    RAFManager.add(() => {\n      this.proton.update();\n      //this.proton.stats.update();\n    });\n  }\n\n  render() {\n    return (\n      <Canvas bg={this.props.bg}\n        globalCompositeOperation=\"darker\"\n        onCanvasDidMount={this.onCanvasDidMount.bind(this)}\n        onCanvasInited={this.onCanvasInited.bind(this)}\n        onResize={this.onResize.bind(this)}\n      />\n    );\n  }\n}\n","import React from \"react\";\nimport Proton from \"proton-engine\";\nimport RAFManager from \"raf-manager\";\nimport Canvas from \"./Canvas.jsx\";\n\nconst COLOR = [\n  \"#f6b93b\",\n  \"#18dcff\",\n  \"#cd84f1\",\n  \"#ED4C67\",\n  \"#ffffff\",\n  \"#b71540\",\n  \"#32ff7e\",\n  \"#ff3838\"\n];\n\nexport default class Polygon extends React.Component {\n  constructor(props) {\n    super(props);\n    this.renderProton = this.renderProton.bind(this);\n  }\n\n  onCanvasInited(canvas, width, height) {\n    this.createProton(canvas);\n    this.createEmitter({\n      canvas,\n      x: width / 2,\n      y: height / 2,\n      mainEmitter: true,\n      zone: \"bound\"\n    });\n\n    RAFManager.add(this.renderProton);\n  }\n\n  componentWillUnmount() {\n    try {\n      RAFManager.remove(this.renderProton);\n      this.proton.destroy();\n    } catch (e) {}\n  }\n\n  onResize() {}\n\n  createProton(canvas) {\n    this.proton = new Proton();\n    const renderer = this.createRenderer(canvas);\n    this.proton.addRenderer(renderer);\n  }\n\n  createRenderer(canvas) {\n    const context = canvas.getContext(\"2d\");\n    const renderer = new Proton.CustomRenderer();\n\n    renderer.onProtonUpdate = () => {\n      context.clearRect(0, 0, canvas.width, canvas.height);\n    };\n\n    renderer.onParticleCreated = particle => {\n      particle.data.count = Proton.MathUtil.randomAToB(3, 10, true);\n    };\n\n    renderer.onParticleUpdate = particle => {\n      context.save();\n      context.globalAlpha = particle.alpha;\n      context.fillStyle = particle.color;\n\n      context.translate(particle.p.x, particle.p.y);\n      context.rotate(Proton.MathUtil.degreeTransform(particle.rotation));\n      context.translate(-particle.p.x, -particle.p.y);\n\n      context.beginPath();\n      drawPolygon(particle, particle.data.count);\n\n      context.closePath();\n      context.fill();\n      context.globalAlpha = 1;\n      context.restore();\n    };\n\n    renderer.onParticleDead = particle => {};\n\n    const drawPolygon = (particle, count) => {\n      if (count >= 7) {\n        context.arc(\n          particle.p.x,\n          particle.p.y,\n          particle.radius,\n          0,\n          Math.PI * 2,\n          true\n        );\n      } else {\n        const radius = particle.radius;\n\n        for (let i = 0; i <= count; i++) {\n          let x =\n            particle.p.x +\n            radius * Math.cos((((Math.PI / 180) * 360) / count) * i);\n          let y =\n            particle.p.y +\n            radius * Math.sin((((Math.PI / 180) * 360) / count) * i);\n\n          if (i === 0) context.moveTo(x, y);\n          else context.lineTo(x, y);\n        }\n      }\n    };\n\n    return renderer;\n  }\n\n  createEmitter({\n    mainEmitter,\n    canvas,\n    x,\n    y,\n    radius,\n    color = COLOR,\n    zone = \"dead\",\n    once = \"all\",\n    alpha = 0.85,\n    gravity = 3.5\n  }) {\n    const emitter = this.proton.pool.get(Proton.Emitter);\n\n    if (!emitter.completed) {\n      emitter.rate = new Proton.Rate(\n        this.props.num ? new Proton.Span(this.props.num) : new Proton.Span(4, 9),\n        new Proton.Span(1.6, 2.2)\n      );\n\n      const radiusInit = mainEmitter\n        ? new Proton.Radius(10, 110)\n        : new Proton.Radius(3, radius);\n      emitter.addInitialize(new Proton.Mass(1));\n      emitter.addInitialize(radiusInit);\n      emitter.addInitialize(new Proton.Life(3, 6));\n      emitter.addInitialize(\n        new Proton.Velocity(\n          new Proton.Span(4, 6),\n          new Proton.Span(-90, 90),\n          \"polar\"\n        )\n      );\n\n      emitter.addBehaviour(new Proton.Alpha(alpha, 0.2));\n      emitter.addBehaviour(new Proton.Color(color));\n      emitter.addBehaviour(new Proton.Scale(1, 0.3));\n      emitter.addBehaviour(new Proton.Rotate());\n      emitter.addBehaviour(new Proton.Gravity(gravity));\n\n      emitter.addBehaviour(this.customDeadBehaviour(canvas));\n      emitter.addBehaviour(\n        new Proton.CrossZone(\n          new Proton.RectZone(0, 0, canvas.width, canvas.height),\n          zone\n        )\n      );\n    }\n\n    emitter.p.x = x;\n    emitter.p.y = y;\n    if (once === \"once\") emitter.emit(\"once\");\n    else emitter.emit();\n\n    this.proton.addEmitter(emitter);\n    //this.expireEmitter(emitter);\n  }\n\n  expireEmitter(emitter) {\n    setTimeout(() => {\n      emitter.completed = true;\n      this.proton.pool.expire(emitter);\n      this.proton.removeEmitter(emitter);\n    }, 500);\n  }\n\n  customDeadBehaviour(canvas) {\n    return {\n      initialize: particle => {\n        particle.data = particle.data || {};\n        particle.data.oldRadius = particle.radius;\n        particle.data.emitterCount = 0;\n      },\n      applyBehaviour: particle => {\n        if (particle.radius < 5) return;\n        if (particle.data.emitterCount >= 2) return;\n\n        if (particle.radius <= (1 / 3) * particle.data.oldRadius) {\n          particle.data.emitterCount++;\n          this.createEmitter({\n            canvas,\n            x: particle.p.x,\n            y: particle.p.y,\n            radius: particle.radius * (1 / 2),\n            alpha: 0.5,\n            gravity: 5,\n            color: particle.color,\n            once: \"once\"\n          });\n        }\n      }\n    };\n  }\n\n  renderProton() {\n    this.proton && this.proton.update();\n  }\n\n  render() {\n    return (\n      <Canvas bg={this.props.bg}\n        globalCompositeOperation=\"darker\"\n        onCanvasInited={this.onCanvasInited.bind(this)}\n        onResize={this.onResize.bind(this)}\n      />\n    );\n  }\n}\n","import React from \"react\";\nimport Proton from \"proton-engine\";\nimport RAFManager from \"raf-manager\";\nimport Canvas from \"./Canvas.jsx\";\n\nexport default class Fountain extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.colors = [\n      \"#529B88\",\n      \"#CDD180\",\n      \"#FFFA32\",\n      \"#FB6255\",\n      \"#FB4A53\",\n      \"#FF4E50\",\n      \"#F9D423\"\n    ];\n    this.renderProton = this.renderProton.bind(this);\n  }\n\n  componentWillUnmount() {\n    try {\n      RAFManager.remove(this.renderProton);\n      this.proton.destroy();\n    } catch (e) {}\n  }\n\n  onCanvasInited(canvas, width, height) {\n    this.createProton(canvas, width, height);\n    RAFManager.add(this.renderProton);\n  }\n\n  onResize() {}\n\n  createProton(canvas, width, height) {\n    this.proton = new Proton();\n    const emitter = new Proton.Emitter();\n    emitter.rate = new Proton.Rate(\n      this.props.num ? new Proton.Span(this.props.num) : new Proton.Span(4, 8),\n      new Proton.Span(0.1, 0.25)\n    );\n\n    emitter.addInitialize(new Proton.Mass(1));\n    emitter.addInitialize(new Proton.Radius(20, 200));\n    emitter.addInitialize(new Proton.Life(2, 4));\n    emitter.addInitialize(\n      new Proton.Velocity(\n        new Proton.Span(4, 7),\n        new Proton.Span(0, 360),\n        \"polar\"\n      )\n    );\n    emitter.addInitialize(\n      new Proton.Position(new Proton.CircleZone(width / 2, height / 2, 100))\n    );\n\n    emitter.addBehaviour(new Proton.Alpha(1, 0));\n    emitter.addBehaviour(new Proton.Scale(0.2, 1));\n    emitter.addBehaviour(this.createCustomBehaviour());\n    emitter.addBehaviour(new Proton.Color(this.colors, \"random\"));\n    emitter.emit();\n    this.proton.addEmitter(emitter);\n\n    const renderer = new Proton.CanvasRenderer(canvas);\n    this.proton.addRenderer(renderer);\n  }\n\n  createCustomBehaviour() {\n    const f = 10 * 100;\n    return {\n      initialize: function(particle) {\n        particle.f = new Proton.Vector2D(0, 0);\n      },\n      applyBehaviour: particle => {\n        let length = particle.v.length() / 1000;\n        let gradient = particle.v.getGradient();\n        gradient += 3.14 / 2;\n\n        particle.f.x = f * length * Math.cos(gradient);\n        particle.f.y = f * length * Math.sin(gradient);\n        particle.a.add(particle.f);\n      }\n    };\n  }\n\n  renderProton() {\n    this.proton && this.proton.update();\n  }\n\n  render() {\n    return (\n      <Canvas bg={this.props.bg}\n        globalCompositeOperation=\"xor\"\n        onCanvasInited={this.onCanvasInited.bind(this)}\n        onResize={this.onResize.bind(this)}\n      />\n    );\n  }\n}\n","import React, { Component } from \"react\";\nimport Rand from \"./utils/Rand.js\";\nimport Ball from \"./particles/Ball.jsx\";\nimport Color from \"./particles/Color.jsx\";\nimport Custom from \"./particles/Custom.jsx\";\nimport Lines from \"./particles/Lines.jsx\";\nimport Thick from \"./particles/Thick.jsx\";\nimport Square from \"./particles/Square.jsx\";\nimport Cobweb from \"./particles/Cobweb.jsx\";\nimport Circle from \"./particles/Circle.jsx\";\nimport Tadpole from \"./particles/Tadpole.jsx\";\nimport Polygon from \"./particles/Polygon.jsx\";\nimport Fountain from \"./particles/Fountain.jsx\";\n\nexport default class ParticlesBg extends Component {\n\n  constructor(props) {\n    super(props);\n  }\n\n  getRandom() {\n    const { num, bg, color } = this.props;\n\n    // Code source from here, thanks author\n    // https://github.com/drawcall/Proton/blob/gh-pages/source/src/utils/Rand.js\n    if (!this.random) {\n      this.random = new Rand();\n      this.random.set(0.25, <Color num={num} bg={bg} color={color} />);\n      this.random.set(0.2, <Ball num={num} bg={bg} color={color} />);\n      this.random.set(0.2, <Lines num={num} bg={bg} color={color} />);\n      this.random.set(0.16, <Thick num={num} bg={bg} color={color} />);\n      this.random.set(0.18, <Circle num={num} bg={bg} color={color} />);\n      this.random.set(0.04, <Cobweb num={num} bg={bg} color={color} />);\n      this.random.set(0.1, <Polygon num={num} bg={bg} color={color} />);\n      this.random.set(0.08, <Square num={num} bg={bg} color={color} />);\n      this.random.set(0.18, <Tadpole num={num} bg={bg} color={color} />);\n      this.random.set(0.15, <Fountain num={num} bg={bg} color={color} />);\n    }\n    return this.random.getResult();\n  }\n\n  getBgParticles() {\n    const { type, num, bg, color, config } = this.props;\n\n    let particles;\n    switch (String(type).toLowerCase()) {\n      case \"color\":\n        particles = <Color num={num} bg={bg} color={color} />;\n        break;\n      case \"ball\":\n        particles = <Ball num={num} bg={bg} color={color} />;\n        break;\n      case \"lines\":\n        particles = <Lines num={num} bg={bg} color={color} />;\n        break;\n      case \"thick\":\n        particles = <Thick num={num} bg={bg} color={color} />;\n        break;\n      case \"circle\":\n        particles = <Circle num={num} bg={bg} color={color} />;\n        break;\n      case \"cobweb\":\n        particles = <Cobweb num={num} bg={bg} color={color} />;\n        break;\n      case \"polygon\":\n        particles = <Polygon num={num} bg={bg} color={color} />;\n        break;\n      case \"square\":\n        particles = <Square num={num} bg={bg} color={color} />;\n        break;\n      case \"tadpole\":\n        particles = <Tadpole num={num} bg={bg} color={color} />;\n        break;\n      case \"fountain\":\n        particles = <Fountain num={num} bg={bg} color={color} />;\n        break;\n      case \"custom\":\n        particles = <Custom bg={bg} config={config} />;\n        break;\n      case \"random\":\n        particles = this.getRandom(num);\n        break;\n\n      default:\n        particles = <Color num={num} bg={bg} color={color} />;\n        break;\n    }\n\n    return particles;\n  }\n\n  render() {\n    const particles = this.getBgParticles();\n    return <React.Fragment>{particles}</React.Fragment>;\n  }\n}\n","const PI = 3.1415926;\nconst INFINITY = Infinity;\n\nconst MathUtil = {\n  PI: PI,\n  PIx2: PI * 2,\n  PI_2: PI / 2,\n  PI_180: PI / 180,\n  N180_PI: 180 / PI,\n  Infinity: -999,\n\n  isInfinity(num) {\n    return num === this.Infinity || num === INFINITY;\n  },\n\n  randomAToB(a, b, isInt = false) {\n    if (!isInt) return a + Math.random() * (b - a);\n    else return Math.floor(Math.random() * (b - a)) + a;\n  },\n\n  randomFloating(center, f, isInt) {\n    return this.randomAToB(center - f, center + f, isInt);\n  },\n\n  randomColor() {\n    return (\n      \"#\" +\n      (\"00000\" + ((Math.random() * 0x1000000) << 0).toString(16)).slice(-6)\n    );\n  },\n\n  randomZone(display) {},\n\n  floor(num, k = 4) {\n    const digits = Math.pow(10, k);\n    return Math.floor(num * digits) / digits;\n  },\n\n  degreeTransform(a) {\n    return (a * PI) / 180;\n  },\n\n  toColor16(num) {\n    return `#${num.toString(16)}`;\n  }\n};\n\nexport default MathUtil;\n","import Util from \"../utils/Util\";\nimport MathUtil from \"../math/MathUtil\";\n\nexport default class Span {\n  constructor(a, b, center) {\n    if (Util.isArray(a)) {\n      this.isArray = true;\n      this.a = a;\n    } else {\n      this.isArray = false;\n      this.a = Util.initValue(a, 1);\n      this.b = Util.initValue(b, this.a);\n      this.center = Util.initValue(center, false);\n    }\n  }\n\n  getValue(isInt = false) {\n    if (this.isArray) {\n      return Util.getRandFromArray(this.a);\n    } else {\n      if (!this.center) {\n        return MathUtil.randomAToB(this.a, this.b, isInt);\n      } else {\n        return MathUtil.randomFloating(this.a, this.b, isInt);\n      }\n    }\n  }\n\n  /**\n   * Returns a new Span object\n   *\n   * @memberof Proton#Proton.Util\n   * @method setSpanValue\n   *\n   * @todo a, b and c should be 'Mixed' or 'Number'?\n   *\n   * @param {Mixed | Span} a\n   * @param {Mixed}               b\n   * @param {Mixed}               c\n   *\n   * @return {Span}\n   */\n  static setSpanValue(a, b, c) {\n    if (a instanceof Span) {\n      return a;\n    } else {\n      if (b === undefined) {\n        return new Span(a);\n      } else {\n        if (c === undefined) return new Span(a, b);\n        else return new Span(a, b, c);\n      }\n    }\n  }\n\n  /**\n   * Returns the value from a Span, if the param is not a Span it will return the given parameter\n   *\n   * @memberof Proton#Proton.Util\n   * @method getValue\n   *\n   * @param {Mixed | Span} pan\n   *\n   * @return {Mixed} the value of Span OR the parameter if it is not a Span\n   */\n  static getSpanValue(pan) {\n    return pan instanceof Span ? pan.getValue() : pan;\n  }\n}\n","export default {\n  /**\n   * @memberof Proton#Proton.WebGLUtil\n   * @method ipot\n   *\n   * @todo add description\n   * @todo add length description\n   *\n   * @param {Number} length\n   *\n   * @return {Boolean}\n   */\n  ipot(length) {\n    return (length & (length - 1)) === 0;\n  },\n\n  /**\n   * @memberof Proton#Proton.WebGLUtil\n   * @method nhpot\n   *\n   * @todo add description\n   * @todo add length description\n   *\n   * @param {Number} length\n   *\n   * @return {Number}\n   */\n  nhpot(length) {\n    --length;\n    for (let i = 1; i < 32; i <<= 1) {\n      length = length | (length >> i);\n    }\n\n    return length + 1;\n  },\n\n  /**\n   * @memberof Proton#Proton.WebGLUtil\n   * @method makeTranslation\n   *\n   * @todo add description\n   * @todo add tx, ty description\n   * @todo add return description\n   *\n   * @param {Number} tx either 0 or 1\n   * @param {Number} ty either 0 or 1\n   *\n   * @return {Object}\n   */\n  makeTranslation(tx, ty) {\n    return [1, 0, 0, 0, 1, 0, tx, ty, 1];\n  },\n\n  /**\n   * @memberof Proton#Proton.WebGLUtil\n   * @method makeRotation\n   *\n   * @todo add description\n   * @todo add return description\n   *\n   * @param {Number} angleInRadians\n   *\n   * @return {Object}\n   */\n  makeRotation(angleInRadians) {\n    let c = Math.cos(angleInRadians);\n    let s = Math.sin(angleInRadians);\n\n    return [c, -s, 0, s, c, 0, 0, 0, 1];\n  },\n\n  /**\n   * @memberof Proton#Proton.WebGLUtil\n   * @method makeScale\n   *\n   * @todo add description\n   * @todo add tx, ty description\n   * @todo add return description\n   *\n   * @param {Number} sx either 0 or 1\n   * @param {Number} sy either 0 or 1\n   *\n   * @return {Object}\n   */\n  makeScale(sx, sy) {\n    return [sx, 0, 0, 0, sy, 0, 0, 0, 1];\n  },\n\n  /**\n   * @memberof Proton#Proton.WebGLUtil\n   * @method matrixMultiply\n   *\n   * @todo add description\n   * @todo add a, b description\n   * @todo add return description\n   *\n   * @param {Object} a\n   * @param {Object} b\n   *\n   * @return {Object}\n   */\n  matrixMultiply(a, b) {\n    let a00 = a[0 * 3 + 0];\n    let a01 = a[0 * 3 + 1];\n    let a02 = a[0 * 3 + 2];\n    let a10 = a[1 * 3 + 0];\n    let a11 = a[1 * 3 + 1];\n    let a12 = a[1 * 3 + 2];\n    let a20 = a[2 * 3 + 0];\n    let a21 = a[2 * 3 + 1];\n    let a22 = a[2 * 3 + 2];\n    let b00 = b[0 * 3 + 0];\n    let b01 = b[0 * 3 + 1];\n    let b02 = b[0 * 3 + 2];\n    let b10 = b[1 * 3 + 0];\n    let b11 = b[1 * 3 + 1];\n    let b12 = b[1 * 3 + 2];\n    let b20 = b[2 * 3 + 0];\n    let b21 = b[2 * 3 + 1];\n    let b22 = b[2 * 3 + 2];\n\n    return [\n      a00 * b00 + a01 * b10 + a02 * b20,\n      a00 * b01 + a01 * b11 + a02 * b21,\n      a00 * b02 + a01 * b12 + a02 * b22,\n      a10 * b00 + a11 * b10 + a12 * b20,\n      a10 * b01 + a11 * b11 + a12 * b21,\n      a10 * b02 + a11 * b12 + a12 * b22,\n      a20 * b00 + a21 * b10 + a22 * b20,\n      a20 * b01 + a21 * b11 + a22 * b21,\n      a20 * b02 + a21 * b12 + a22 * b22\n    ];\n  }\n};\n","export default {\n  /**\n   * Creates and returns a new canvas. The opacity is by default set to 0\n   *\n   * @memberof Proton#Proton.DomUtil\n   * @method createCanvas\n   *\n   * @param {String} $id the canvas' id\n   * @param {Number} $width the canvas' width\n   * @param {Number} $height the canvas' height\n   * @param {String} [$position=absolute] the canvas' position, default is 'absolute'\n   *\n   * @return {Object}\n   */\n  createCanvas(id, width, height, position = \"absolute\") {\n    const dom = document.createElement(\"canvas\");\n\n    dom.id = id;\n    dom.width = width;\n    dom.height = height;\n    dom.style.opacity = 0;\n    dom.style.position = position;\n    this.transform(dom, -500, -500, 0, 0);\n\n    return dom;\n  },\n\n  createDiv(id, width, height) {\n    const dom = document.createElement(\"div\");\n\n    dom.id = id;\n    dom.style.position = \"absolute\";\n    this.resize(dom, width, height);\n\n    return dom;\n  },\n\n  resize(dom, width, height) {\n    dom.style.width = width + \"px\";\n    dom.style.height = height + \"px\";\n    dom.style.marginLeft = -width / 2 + \"px\";\n    dom.style.marginTop = -height / 2 + \"px\";\n  },\n\n  /**\n   * Adds a transform: translate(), scale(), rotate() to a given div dom for all browsers\n   *\n   * @memberof Proton#Proton.DomUtil\n   * @method transform\n   *\n   * @param {HTMLDivElement} div\n   * @param {Number} $x\n   * @param {Number} $y\n   * @param {Number} $scale\n   * @param {Number} $rotate\n   */\n  transform(div, x, y, scale, rotate) {\n    div.style.willChange = \"transform\";\n    const transform = `translate(${x}px, ${y}px) scale(${scale}) rotate(${rotate}deg)`;\n    this.css3(div, \"transform\", transform);\n  },\n\n  transform3d(div, x, y, scale, rotate) {\n    div.style.willChange = \"transform\";\n    const transform = `translate3d(${x}px, ${y}px, 0) scale(${scale}) rotate(${rotate}deg)`;\n    this.css3(div, \"backfaceVisibility\", \"hidden\");\n    this.css3(div, \"transform\", transform);\n  },\n\n  css3(div, key, val) {\n    const bkey = key.charAt(0).toUpperCase() + key.substr(1);\n\n    div.style[`Webkit${bkey}`] = val;\n    div.style[`Moz${bkey}`] = val;\n    div.style[`O${bkey}`] = val;\n    div.style[`ms${bkey}`] = val;\n    div.style[`${key}`] = val;\n  }\n};\n","import WebGLUtil from \"./WebGLUtil\";\nimport DomUtil from \"./DomUtil\";\n\nconst imgsCache = {};\nconst canvasCache = {};\nlet canvasId = 0;\n\nexport default {\n  /**\n   * This will get the image data. It could be necessary to create a Proton.Zone.\n   *\n   * @memberof Proton#Proton.Util\n   * @method getImageData\n   *\n   * @param {HTMLCanvasElement}   context any canvas, must be a 2dContext 'canvas.getContext('2d')'\n   * @param {Object}              image   could be any dom image, e.g. document.getElementById('thisIsAnImgTag');\n   * @param {Proton.Rectangle}    rect\n   */\n  getImageData(context, image, rect) {\n    context.drawImage(image, rect.x, rect.y);\n    const imagedata = context.getImageData(\n      rect.x,\n      rect.y,\n      rect.width,\n      rect.height\n    );\n    context.clearRect(rect.x, rect.y, rect.width, rect.height);\n\n    return imagedata;\n  },\n\n  /**\n   * @memberof Proton#Proton.Util\n   * @method getImgFromCache\n   *\n   * @todo add description\n   * @todo describe func\n   *\n   * @param {Mixed}               img\n   * @param {Proton.Particle}     particle\n   * @param {Boolean}             drawCanvas  set to true if a canvas should be saved into particle.data.canvas\n   * @param {Boolean}             func\n   */\n  getImgFromCache(img, callback, param) {\n    const src = typeof img === \"string\" ? img : img.src;\n\n    if (imgsCache[src]) {\n      callback(imgsCache[src], param);\n    } else {\n      const image = new Image();\n      image.onload = e => {\n        imgsCache[src] = e.target;\n        callback(imgsCache[src], param);\n      };\n\n      image.src = src;\n    }\n  },\n\n  getCanvasFromCache(img, callback, param) {\n    const src = img.src;\n\n    if (!canvasCache[src]) {\n      const width = WebGLUtil.nhpot(img.width);\n      const height = WebGLUtil.nhpot(img.height);\n\n      const canvas = DomUtil.createCanvas(\n        `proton_canvas_cache_${++canvasId}`,\n        width,\n        height\n      );\n      const context = canvas.getContext(\"2d\");\n      context.drawImage(img, 0, 0, img.width, img.height);\n\n      canvasCache[src] = canvas;\n    }\n\n    callback && callback(canvasCache[src], param);\n\n    return canvasCache[src];\n  }\n};\n","import Span from \"../math/Span\";\nimport ImgUtil from \"./ImgUtil\";\n\nexport default {\n  /**\n   * Returns the default if the value is null or undefined\n   *\n   * @memberof Proton#Proton.Util\n   * @method initValue\n   *\n   * @param {Mixed} value a specific value, could be everything but null or undefined\n   * @param {Mixed} defaults the default if the value is null or undefined\n   */\n  initValue(value, defaults) {\n    value = value !== null && value !== undefined ? value : defaults;\n    return value;\n  },\n\n  /**\n   * Checks if the value is a valid array\n   *\n   * @memberof Proton#Proton.Util\n   * @method isArray\n   *\n   * @param {Array} value Any array\n   *\n   * @returns {Boolean}\n   */\n  isArray(value) {\n    return Object.prototype.toString.call(value) === \"[object Array]\";\n  },\n\n  /**\n   * Destroyes the given array\n   *\n   * @memberof Proton#Proton.Util\n   * @method emptyArray\n   *\n   * @param {Array} array Any array\n   */\n  emptyArray(arr) {\n    if (arr) arr.length = 0;\n  },\n\n  toArray(arr) {\n    return this.isArray(arr) ? arr : [arr];\n  },\n\n  getRandFromArray(arr) {\n    if (!arr) return null;\n    return arr[Math.floor(arr.length * Math.random())];\n  },\n\n  /**\n   * Destroyes the given object\n   *\n   * @memberof Proton#Proton.Util\n   * @method emptyObject\n   *\n   * @param {Object} obj Any object\n   */\n  emptyObject(obj, ignore = null) {\n    for (let key in obj) {\n      if (ignore && ignore.indexOf(key) > -1) continue;\n      delete obj[key];\n    }\n  },\n\n  /**\n   * Makes an instance of a class and binds the given array\n   *\n   * @memberof Proton#Proton.Util\n   * @method classApply\n   *\n   * @param {Function} constructor A class to make an instance from\n   * @param {Array} [args] Any array to bind it to the constructor\n   *\n   * @return {Object} The instance of constructor, optionally bind with args\n   */\n  classApply(constructor, args = null) {\n    if (!args) {\n      return new constructor();\n    } else {\n      const FactoryFunc = constructor.bind.apply(\n        constructor,\n        [null].concat(args)\n      );\n      return new FactoryFunc();\n    }\n  },\n\n  /**\n   * @memberof Proton#Proton.Util\n   * @method setVectorVal\n   *\n   * @todo add description for param `target`\n   * @todo add description for param `conf`\n   * @todo add description for function\n   *\n   * @param {Object} target\n   * @param {Object} conf\n   */\n  setVectorVal(particle, conf = null) {\n    if (!conf) return;\n\n    if (this.hasProp(conf, \"x\")) particle.p.x = conf[\"x\"];\n    if (this.hasProp(conf, \"y\")) particle.p.y = conf[\"y\"];\n\n    if (this.hasProp(conf, \"vx\")) particle.v.x = conf[\"vx\"];\n    if (this.hasProp(conf, \"vy\")) particle.v.y = conf[\"vy\"];\n\n    if (this.hasProp(conf, \"ax\")) particle.a.x = conf[\"ax\"];\n    if (this.hasProp(conf, \"ay\")) particle.a.y = conf[\"ay\"];\n\n    if (this.hasProp(conf, \"p\")) particle.p.copy(conf[\"p\"]);\n    if (this.hasProp(conf, \"v\")) particle.v.copy(conf[\"v\"]);\n    if (this.hasProp(conf, \"a\")) particle.a.copy(conf[\"a\"]);\n\n    if (this.hasProp(conf, \"position\")) particle.p.copy(conf[\"position\"]);\n    if (this.hasProp(conf, \"velocity\")) particle.v.copy(conf[\"velocity\"]);\n    if (this.hasProp(conf, \"accelerate\")) particle.a.copy(conf[\"accelerate\"]);\n  },\n\n  hasProp(target, key) {\n    if (!target) return false;\n    return target[key] !== undefined;\n    // return obj.hasOwnProperty(key);\n  },\n\n  /**\n   * set the prototype in a given prototypeObject\n   *\n   * @memberof Proton#Proton.Util\n   * @method setProp\n   *\n   * @todo add description for param `target`\n   * @todo translate desription from chinese to english\n   *\n   * @param {Object} target\n   * @param {Object} prototypeObject An object of single prototypes\n   *\n   * @return {Object} target\n   */\n  setProp(target, props) {\n    for (let prop in props) {\n      if (target.hasOwnProperty(prop)) {\n        target[prop] = Span.getSpanValue(props[prop]);\n      }\n    }\n\n    return target;\n  },\n\n  /**\n   * This will get the image data. It could be necessary to create a Proton.Zone.\n   *\n   * @memberof Proton#Proton.Util\n   * @method getImageData\n   *\n   * @param {HTMLCanvasElement}   context any canvas, must be a 2dContext 'canvas.getContext('2d')'\n   * @param {Object}              image   could be any dom image, e.g. document.getElementById('thisIsAnImgTag');\n   * @param {Proton.Rectangle}    rect\n   */\n  getImageData(context, image, rect) {\n    return ImgUtil.getImageData(context, image, rect);\n  },\n\n  destroyAll(arr, param = null) {\n    let i = arr.length;\n\n    while (i--) {\n      try {\n        arr[i].destroy(param);\n      } catch (e) {}\n\n      delete arr[i];\n    }\n\n    arr.length = 0;\n  },\n\n  assign(target, source) {\n    if (typeof Object.assign !== \"function\") {\n      for (let key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n\n      return target;\n    } else {\n      return Object.assign(target, source);\n    }\n  }\n};\n","const idsMap = {};\n\nconst Puid = {\n  _index: 0,\n  _cache: {},\n\n  id(type) {\n    if (idsMap[type] === undefined || idsMap[type] === null) idsMap[type] = 0;\n    return `${type}_${idsMap[type]++}`;\n  },\n\n  getId(target) {\n    let uid = this.getIdFromCache(target);\n    if (uid) return uid;\n\n    uid = `PUID_${this._index++}`;\n    this._cache[uid] = target;\n\n    return uid;\n  },\n\n  getIdFromCache(target) {\n    let obj, id;\n\n    for (id in this._cache) {\n      obj = this._cache[id];\n\n      if (obj === target) return id;\n      if (this.isBody(obj, target) && obj.src === target.src) return id;\n    }\n\n    return null;\n  },\n\n  isBody(obj, target) {\n    return (\n      typeof obj === \"object\" &&\n      typeof target === \"object\" &&\n      obj.isInner &&\n      target.isInner\n    );\n  },\n\n  getTarget(uid) {\n    return this._cache[uid];\n  }\n};\n\nexport default Puid;\n","/**\n * Pool is the cache pool of the proton engine, it is very important.\n *\n * get(target, params, uid)\n *  Class\n *    uid = Puid.getId -> Puid save target cache\n *    target.__puid = uid\n *\n *  body\n *    uid = Puid.getId -> Puid save target cache\n *\n *\n * expire(target)\n *  cache[target.__puid] push target\n *\n */\nimport Util from \"../utils/Util\";\nimport Puid from \"../utils/Puid\";\n\nexport default class Pool {\n  /**\n   * @memberof! Proton#\n   * @constructor\n   * @alias Proton.Pool\n   *\n   * @todo add description\n   * @todo add description of properties\n   *\n   * @property {Number} total\n   * @property {Object} cache\n   */\n  constructor(num) {\n    this.total = 0;\n    this.cache = {};\n  }\n\n  /**\n   * @todo add description\n   *\n   * @method get\n   * @memberof Proton#Proton.Pool\n   *\n   * @param {Object|Function} target\n   * @param {Object} [params] just add if `target` is a function\n   *\n   * @return {Object}\n   */\n  get(target, params, uid) {\n    let p;\n    uid = uid || target.__puid || Puid.getId(target);\n\n    if (this.cache[uid] && this.cache[uid].length > 0) {\n      p = this.cache[uid].pop();\n    } else {\n      p = this.createOrClone(target, params);\n    }\n\n    p.__puid = target.__puid || uid;\n    return p;\n  }\n\n  /**\n   * @todo add description\n   *\n   * @method set\n   * @memberof Proton#Proton.Pool\n   *\n   * @param {Object} target\n   *\n   * @return {Object}\n   */\n  expire(target) {\n    return this.getCache(target.__puid).push(target);\n  }\n\n  /**\n   * Creates a new class instance\n   *\n   * @todo add more documentation\n   *\n   * @method create\n   * @memberof Proton#Proton.Pool\n   *\n   * @param {Object|Function} target any Object or Function\n   * @param {Object} [params] just add if `target` is a function\n   *\n   * @return {Object}\n   */\n  createOrClone(target, params) {\n    this.total++;\n\n    if (this.create) {\n      return this.create(target, params);\n    } else if (typeof target === \"function\") {\n      return Util.classApply(target, params);\n    } else {\n      return target.clone();\n    }\n  }\n\n  /**\n   * @todo add description - what is in the cache?\n   *\n   * @method getCount\n   * @memberof Proton#Proton.Pool\n   *\n   * @return {Number}\n   */\n  getCount() {\n    let count = 0;\n    for (let id in this.cache) count += this.cache[id].length;\n    return count++;\n  }\n\n  /**\n   * Destroyes all items from Pool.cache\n   *\n   * @method destroy\n   * @memberof Proton#Proton.Pool\n   */\n  destroy() {\n    for (let id in this.cache) {\n      this.cache[id].length = 0;\n      delete this.cache[id];\n    }\n  }\n\n  /**\n   * Returns Pool.cache\n   *\n   * @method getCache\n   * @memberof Proton#Proton.Pool\n   * @private\n   *\n   * @param {Number} uid the unique id\n   *\n   * @return {Object}\n   */\n  getCache(uid = \"default\") {\n    if (!this.cache[uid]) this.cache[uid] = [];\n    return this.cache[uid];\n  }\n}\n","export default class Stats {\n  constructor(proton) {\n    this.proton = proton;\n    this.container = null;\n    this.type = 1;\n\n    this.emitterIndex = 0;\n    this.rendererIndex = 0;\n  }\n\n  update(style, body) {\n    this.add(style, body);\n\n    const emitter = this.getEmitter();\n    const renderer = this.getRenderer();\n    let str = \"\";\n\n    switch (this.type) {\n      case 2:\n        str += \"emitter:\" + this.proton.emitters.length + \"<br>\";\n        if (emitter) str += \"em speed:\" + emitter.emitSpeed + \"<br>\";\n        if (emitter) str += \"pos:\" + this.getEmitterPos(emitter);\n        break;\n\n      case 3:\n        if (emitter)\n          str += \"initializes:\" + emitter.initializes.length + \"<br>\";\n        if (emitter)\n          str +=\n            '<span style=\"display:inline-block;\">' +\n            this.concatArr(emitter.initializes) +\n            \"</span><br>\";\n        if (emitter) str += \"behaviours:\" + emitter.behaviours.length + \"<br>\";\n        if (emitter)\n          str +=\n            '<span style=\"display:inline-block;\">' +\n            this.concatArr(emitter.behaviours) +\n            \"</span><br>\";\n        break;\n\n      case 4:\n        if (renderer) str += renderer.name + \"<br>\";\n        if (renderer) str += \"body:\" + this.getCreatedNumber(renderer) + \"<br>\";\n        break;\n\n      default:\n        str += \"particles:\" + this.proton.getCount() + \"<br>\";\n        str += \"pool:\" + this.proton.pool.getCount() + \"<br>\";\n        str += \"total:\" + this.proton.pool.total;\n    }\n\n    this.container.innerHTML = str;\n  }\n\n  add(style, body) {\n    if (!this.container) {\n      this.type = 1;\n\n      this.container = document.createElement(\"div\");\n      this.container.style.cssText = [\n        \"position:absolute;bottom:0px;left:0;cursor:pointer;\",\n        \"opacity:0.9;z-index:10000;padding:10px;font-size:12px;font-family:Helvetica,Arial,sans-serif;\",\n        \"width:120px;height:50px;background-color:#002;color:#0ff;\"\n      ].join(\"\");\n\n      this.container.addEventListener(\n        \"click\",\n        e => {\n          this.type++;\n          if (this.type > 4) this.type = 1;\n        },\n        false\n      );\n\n      let bg, color;\n      switch (style) {\n        case 2:\n          bg = \"#201\";\n          color = \"#f08\";\n          break;\n\n        case 3:\n          bg = \"#020\";\n          color = \"#0f0\";\n          break;\n\n        default:\n          bg = \"#002\";\n          color = \"#0ff\";\n      }\n\n      this.container.style[\"background-color\"] = bg;\n      this.container.style[\"color\"] = color;\n    }\n\n    if (!this.container.parentNode) {\n      body = body || this.body || document.body;\n      body.appendChild(this.container);\n    }\n  }\n\n  getEmitter() {\n    return this.proton.emitters[this.emitterIndex];\n  }\n\n  getRenderer() {\n    return this.proton.renderers[this.rendererIndex];\n  }\n\n  concatArr(arr) {\n    let result = \"\";\n    if (!arr || !arr.length) return result;\n\n    for (let i = 0; i < arr.length; i++) {\n      result += (arr[i].name || \"\").substr(0, 1) + \".\";\n    }\n\n    return result;\n  }\n\n  getCreatedNumber(renderer) {\n    return renderer.pool.total || (renderer.cpool && renderer.cpool.total) || 0;\n  }\n\n  getEmitterPos(e) {\n    return Math.round(e.p.x) + \",\" + Math.round(e.p.y);\n  }\n}\n","/*\n * EventDispatcher\n * This code reference since http://createjs.com/.\n *\n **/\n\nexport default class EventDispatcher {\n  constructor() {\n    this._listeners = null;\n  }\n\n  static bind(target) {\n    target.prototype.dispatchEvent = EventDispatcher.prototype.dispatchEvent;\n\n    target.prototype.hasEventListener =\n      EventDispatcher.prototype.hasEventListener;\n\n    target.prototype.addEventListener =\n      EventDispatcher.prototype.addEventListener;\n\n    target.prototype.removeEventListener =\n      EventDispatcher.prototype.removeEventListener;\n\n    target.prototype.removeAllEventListeners =\n      EventDispatcher.prototype.removeAllEventListeners;\n  }\n\n  addEventListener(type, listener) {\n    if (!this._listeners) {\n      this._listeners = {};\n    } else {\n      this.removeEventListener(type, listener);\n    }\n\n    if (!this._listeners[type]) this._listeners[type] = [];\n    this._listeners[type].push(listener);\n\n    return listener;\n  }\n\n  removeEventListener(type, listener) {\n    if (!this._listeners) return;\n    if (!this._listeners[type]) return;\n\n    const arr = this._listeners[type];\n    const length = arr.length;\n\n    for (let i = 0; i < length; i++) {\n      if (arr[i] === listener) {\n        if (length === 1) {\n          delete this._listeners[type];\n        }\n\n        // allows for faster checks.\n        else {\n          arr.splice(i, 1);\n        }\n\n        break;\n      }\n    }\n  }\n\n  removeAllEventListeners(type) {\n    if (!type) this._listeners = null;\n    else if (this._listeners) delete this._listeners[type];\n  }\n\n  dispatchEvent(type, args) {\n    let result = false;\n    const listeners = this._listeners;\n\n    if (type && listeners) {\n      let arr = listeners[type];\n      if (!arr) return result;\n\n      // arr = arr.slice();\n      // to avoid issues with items being removed or added during the dispatch\n\n      let handler;\n      let i = arr.length;\n      while (i--) {\n        handler = arr[i];\n        result = result || handler(args);\n      }\n    }\n\n    return !!result;\n  }\n\n  hasEventListener(type) {\n    const listeners = this._listeners;\n    return !!(listeners && listeners[type]);\n  }\n}\n","export default class Integration {\n  constructor(type) {\n    this.type = type;\n  }\n\n  calculate(particles, time, damping) {\n    this.eulerIntegrate(particles, time, damping);\n  }\n\n  // Euler Integrate\n  // https://rosettacode.org/wiki/Euler_method\n  eulerIntegrate(particle, time, damping) {\n    if (!particle.sleep) {\n      particle.old.p.copy(particle.p);\n      particle.old.v.copy(particle.v);\n\n      particle.a.multiplyScalar(1 / particle.mass);\n      particle.v.add(particle.a.multiplyScalar(time));\n      particle.p.add(particle.old.v.multiplyScalar(time));\n\n      if (damping) particle.v.multiplyScalar(damping);\n\n      particle.a.clear();\n    }\n  }\n}\n","import Pool from \"./Pool\";\nimport Util from \"../utils/Util\";\nimport Stats from \"../debug/Stats\";\nimport EventDispatcher from \"../events/EventDispatcher\";\nimport MathUtil from \"../math/MathUtil\";\nimport Integration from \"../math/Integration\";\n\nexport default class Proton {\n  static USE_CLOCK = false;\n\n  // measure 1:100\n  static MEASURE = 100;\n  static EULER = \"euler\";\n  static RK2 = \"runge-kutta2\";\n\n  // event name\n  static PARTICLE_CREATED = \"PARTICLE_CREATED\";\n  static PARTICLE_UPDATE = \"PARTICLE_UPDATE\";\n  static PARTICLE_SLEEP = \"PARTICLE_SLEEP\";\n  static PARTICLE_DEAD = \"PARTICLE_DEAD\";\n\n  static EMITTER_ADDED = \"EMITTER_ADDED\";\n  static EMITTER_REMOVED = \"EMITTER_REMOVED\";\n\n  static PROTON_UPDATE = \"PROTON_UPDATE\";\n  static PROTON_UPDATE_AFTER = \"PROTON_UPDATE_AFTER\";\n  static DEFAULT_INTERVAL = 0.0167;\n\n  static amendChangeTabsBug = true;\n\n  /**\n   * The constructor to add emitters\n   *\n   * @constructor Proton\n   *\n   * @todo proParticleCount is not in use\n   * @todo add more documentation of the single properties and parameters\n   *\n   * @param {Number} [proParticleCount] not in use?\n   * @param {Number} [integrationType=Proton.EULER]\n   *\n   * @property {String} [integrationType=Proton.EULER]\n   * @property {Array} emitters   All added emitter\n   * @property {Array} renderers  All added renderer\n   * @property {Number} time      The active time\n   * @property {Number} oldtime   The old time\n   */\n  constructor(integrationType) {\n    this.emitters = [];\n    this.renderers = [];\n\n    this.time = 0;\n    this.now = 0;\n    this.then = 0;\n    this.elapsed = 0;\n\n    this.stats = new Stats(this);\n    this.pool = new Pool(80);\n\n    this.integrationType = Util.initValue(integrationType, Proton.EULER);\n    this.integrator = new Integration(this.integrationType);\n\n    this._fps = \"auto\";\n    this._interval = Proton.DEFAULT_INTERVAL;\n  }\n\n  set fps(fps) {\n    this._fps = fps;\n    this._interval =\n      fps === \"auto\" ? Proton.DEFAULT_INTERVAL : MathUtil.floor(1 / fps, 7);\n  }\n\n  get fps() {\n    return this._fps;\n  }\n\n  /**\n   * add a type of Renderer\n   *\n   * @method addRenderer\n   * @memberof Proton\n   * @instance\n   *\n   * @param {Renderer} render\n   */\n  addRenderer(render) {\n    render.init(this);\n    this.renderers.push(render);\n  }\n\n  /**\n   * @name add a type of Renderer\n   *\n   * @method addRenderer\n   * @param {Renderer} render\n   */\n  removeRenderer(render) {\n    const index = this.renderers.indexOf(render);\n    this.renderers.splice(index, 1);\n    render.remove(this);\n  }\n\n  /**\n   * add the Emitter\n   *\n   * @method addEmitter\n   * @memberof Proton\n   * @instance\n   *\n   * @param {Emitter} emitter\n   */\n  addEmitter(emitter) {\n    this.emitters.push(emitter);\n    emitter.parent = this;\n\n    this.dispatchEvent(Proton.EMITTER_ADDED, emitter);\n  }\n\n  /**\n   * Removes an Emitter\n   *\n   * @method removeEmitter\n   * @memberof Proton\n   * @instance\n   *\n   * @param {Proton.Emitter} emitter\n   */\n  removeEmitter(emitter) {\n    const index = this.emitters.indexOf(emitter);\n    this.emitters.splice(index, 1);\n    emitter.parent = null;\n\n    this.dispatchEvent(Proton.EMITTER_REMOVED, emitter);\n  }\n\n  /**\n   * Updates all added emitters\n   *\n   * @method update\n   * @memberof Proton\n   * @instance\n   */\n  update() {\n    // 'auto' is the default browser refresh rate, the vast majority is 60fps\n    if (this._fps === \"auto\") {\n      this.dispatchEvent(Proton.PROTON_UPDATE);\n\n      if (Proton.USE_CLOCK) {\n        if (!this.then) this.then = new Date().getTime();\n        this.now = new Date().getTime();\n        this.elapsed = (this.now - this.then) * 0.001;\n        // Fix bugs such as chrome browser switching tabs causing excessive time difference\n        this.amendChangeTabsBug();\n\n        if (this.elapsed > 0) this.emittersUpdate(this.elapsed);\n        this.then = this.now;\n      } else {\n        this.emittersUpdate(Proton.DEFAULT_INTERVAL);\n      }\n\n      this.dispatchEvent(Proton.PROTON_UPDATE_AFTER);\n    }\n\n    // If the fps frame rate is set\n    else {\n      if (!this.then) this.then = new Date().getTime();\n      this.now = new Date().getTime();\n      this.elapsed = (this.now - this.then) * 0.001;\n\n      if (this.elapsed > this._interval) {\n        this.dispatchEvent(Proton.PROTON_UPDATE);\n        this.emittersUpdate(this._interval);\n        // https://stackoverflow.com/questions/19764018/controlling-fps-with-requestanimationframe\n        this.then = this.now - (this.elapsed % this._interval) * 1000;\n        this.dispatchEvent(Proton.PROTON_UPDATE_AFTER);\n      }\n    }\n  }\n\n  emittersUpdate(elapsed) {\n    let i = this.emitters.length;\n    while (i--) this.emitters[i].update(elapsed);\n  }\n\n  /**\n   * @todo add description\n   *\n   * @method amendChangeTabsBug\n   * @memberof Proton\n   * @instance\n   */\n  amendChangeTabsBug() {\n    if (!Proton.amendChangeTabsBug) return;\n    if (this.elapsed > 0.5) {\n      this.then = new Date().getTime();\n      this.elapsed = 0;\n    }\n  }\n\n  /**\n   * Counts all particles from all emitters\n   *\n   * @method getCount\n   * @memberof Proton\n   * @instance\n   */\n  getCount() {\n    let total = 0;\n    let i = this.emitters.length;\n\n    while (i--) total += this.emitters[i].particles.length;\n    return total;\n  }\n\n  getAllParticles() {\n    let particles = [];\n    let i = this.emitters.length;\n\n    while (i--) particles = particles.concat(this.emitters[i].particles);\n    return particles;\n  }\n\n  destroyAllEmitters() {\n    Util.destroyAll(this.emitters);\n  }\n\n  /**\n   * Destroys everything related to this Proton instance. This includes all emitters, and all properties\n   *\n   * @method destroy\n   * @memberof Proton\n   * @instance\n   */\n  destroy(remove = false) {\n    const destroyOther = () => {\n      this.time = 0;\n      this.then = 0;\n      this.pool.destroy();\n\n      Util.destroyAll(this.emitters);\n      Util.destroyAll(this.renderers, this.getAllParticles());\n    };\n\n    if (remove) {\n      setTimeout(destroyOther, 200);\n    } else {\n      destroyOther();\n    }\n  }\n}\n\nEventDispatcher.bind(Proton);\n","export default class Rgb {\n  constructor(r = 255, g = 255, b = 255) {\n    this.r = r;\n    this.g = g;\n    this.b = b;\n  }\n\n  reset() {\n    this.r = 255;\n    this.g = 255;\n    this.b = 255;\n  }\n}\n","import MathUtil from \"./MathUtil\";\n\nexport default {\n  easeLinear(value) {\n    return value;\n  },\n\n  easeInQuad(value) {\n    return Math.pow(value, 2);\n  },\n\n  easeOutQuad(value) {\n    return -(Math.pow(value - 1, 2) - 1);\n  },\n\n  easeInOutQuad(value) {\n    if ((value /= 0.5) < 1) return 0.5 * Math.pow(value, 2);\n\n    return -0.5 * ((value -= 2) * value - 2);\n  },\n\n  easeInCubic(value) {\n    return Math.pow(value, 3);\n  },\n\n  easeOutCubic(value) {\n    return Math.pow(value - 1, 3) + 1;\n  },\n\n  easeInOutCubic(value) {\n    if ((value /= 0.5) < 1) return 0.5 * Math.pow(value, 3);\n\n    return 0.5 * (Math.pow(value - 2, 3) + 2);\n  },\n\n  easeInQuart(value) {\n    return Math.pow(value, 4);\n  },\n\n  easeOutQuart(value) {\n    return -(Math.pow(value - 1, 4) - 1);\n  },\n\n  easeInOutQuart(value) {\n    if ((value /= 0.5) < 1) return 0.5 * Math.pow(value, 4);\n\n    return -0.5 * ((value -= 2) * Math.pow(value, 3) - 2);\n  },\n\n  easeInSine(value) {\n    return -Math.cos(value * MathUtil.PI_2) + 1;\n  },\n\n  easeOutSine(value) {\n    return Math.sin(value * MathUtil.PI_2);\n  },\n\n  easeInOutSine(value) {\n    return -0.5 * (Math.cos(Math.PI * value) - 1);\n  },\n\n  easeInExpo(value) {\n    return value === 0 ? 0 : Math.pow(2, 10 * (value - 1));\n  },\n\n  easeOutExpo(value) {\n    return value === 1 ? 1 : -Math.pow(2, -10 * value) + 1;\n  },\n\n  easeInOutExpo(value) {\n    if (value === 0) return 0;\n\n    if (value === 1) return 1;\n\n    if ((value /= 0.5) < 1) return 0.5 * Math.pow(2, 10 * (value - 1));\n\n    return 0.5 * (-Math.pow(2, -10 * --value) + 2);\n  },\n\n  easeInCirc(value) {\n    return -(Math.sqrt(1 - value * value) - 1);\n  },\n\n  easeOutCirc(value) {\n    return Math.sqrt(1 - Math.pow(value - 1, 2));\n  },\n\n  easeInOutCirc(value) {\n    if ((value /= 0.5) < 1) return -0.5 * (Math.sqrt(1 - value * value) - 1);\n    return 0.5 * (Math.sqrt(1 - (value -= 2) * value) + 1);\n  },\n\n  easeInBack(value) {\n    let s = 1.70158;\n    return value * value * ((s + 1) * value - s);\n  },\n\n  easeOutBack(value) {\n    let s = 1.70158;\n    return (value = value - 1) * value * ((s + 1) * value + s) + 1;\n  },\n\n  easeInOutBack(value) {\n    let s = 1.70158;\n    if ((value /= 0.5) < 1)\n      return 0.5 * (value * value * (((s *= 1.525) + 1) * value - s));\n    return 0.5 * ((value -= 2) * value * (((s *= 1.525) + 1) * value + s) + 2);\n  },\n\n  getEasing(ease) {\n    if (typeof ease === \"function\") return ease;\n    else return this[ease] || this.easeLinear;\n  }\n};\n","import MathUtil from \"../math/MathUtil\";\n\nexport default class Vector2D {\n  constructor(x, y) {\n    this.x = x || 0;\n    this.y = y || 0;\n  }\n\n  set(x, y) {\n    this.x = x;\n    this.y = y;\n    return this;\n  }\n\n  setX(x) {\n    this.x = x;\n    return this;\n  }\n\n  setY(y) {\n    this.y = y;\n    return this;\n  }\n\n  getGradient() {\n    if (this.x !== 0) return Math.atan2(this.y, this.x);\n    else if (this.y > 0) return MathUtil.PI_2;\n    else if (this.y < 0) return -MathUtil.PI_2;\n  }\n\n  copy(v) {\n    this.x = v.x;\n    this.y = v.y;\n\n    return this;\n  }\n\n  add(v, w) {\n    if (w !== undefined) {\n      return this.addVectors(v, w);\n    }\n\n    this.x += v.x;\n    this.y += v.y;\n\n    return this;\n  }\n\n  addXY(a, b) {\n    this.x += a;\n    this.y += b;\n\n    return this;\n  }\n\n  addVectors(a, b) {\n    this.x = a.x + b.x;\n    this.y = a.y + b.y;\n\n    return this;\n  }\n\n  sub(v, w) {\n    if (w !== undefined) {\n      return this.subVectors(v, w);\n    }\n\n    this.x -= v.x;\n    this.y -= v.y;\n\n    return this;\n  }\n\n  subVectors(a, b) {\n    this.x = a.x - b.x;\n    this.y = a.y - b.y;\n\n    return this;\n  }\n\n  divideScalar(s) {\n    if (s !== 0) {\n      this.x /= s;\n      this.y /= s;\n    } else {\n      this.set(0, 0);\n    }\n\n    return this;\n  }\n\n  multiplyScalar(s) {\n    this.x *= s;\n    this.y *= s;\n\n    return this;\n  }\n\n  negate() {\n    return this.multiplyScalar(-1);\n  }\n\n  dot(v) {\n    return this.x * v.x + this.y * v.y;\n  }\n\n  lengthSq() {\n    return this.x * this.x + this.y * this.y;\n  }\n\n  length() {\n    return Math.sqrt(this.x * this.x + this.y * this.y);\n  }\n\n  normalize() {\n    return this.divideScalar(this.length());\n  }\n\n  distanceTo(v) {\n    return Math.sqrt(this.distanceToSquared(v));\n  }\n\n  rotate(tha) {\n    const x = this.x;\n    const y = this.y;\n\n    this.x = x * Math.cos(tha) + y * Math.sin(tha);\n    this.y = -x * Math.sin(tha) + y * Math.cos(tha);\n\n    return this;\n  }\n\n  distanceToSquared(v) {\n    const dx = this.x - v.x;\n    const dy = this.y - v.y;\n\n    return dx * dx + dy * dy;\n  }\n\n  lerp(v, alpha) {\n    this.x += (v.x - this.x) * alpha;\n    this.y += (v.y - this.y) * alpha;\n\n    return this;\n  }\n\n  equals(v) {\n    return v.x === this.x && v.y === this.y;\n  }\n\n  clear() {\n    this.x = 0.0;\n    this.y = 0.0;\n    return this;\n  }\n\n  clone() {\n    return new Vector2D(this.x, this.y);\n  }\n}\n","/** @typedef {import('../behaviour/Behaviour')} Behaviour */\n/** @typedef {import('../math/Vector2D')} Vector2D */\n/** @typedef {import('../utils/Rgb')} Rgb */\nimport Rgb from \"../utils/Rgb\";\nimport Puid from \"../utils/Puid\";\nimport Util from \"../utils/Util\";\nimport ease from \"../math/ease\";\nimport Vector2D from \"../math/Vector2D\";\nimport MathUtil from \"../math/MathUtil\";\n\nexport default class Particle {\n  /** @type string */\n  id = ''\n\n  /** @type {{p:Vector2D,v:Vector2D,a:Vector2D}} */\n  old = {}\n\n  /** @type {object} */\n  data = {}\n\n  /** @type {Behaviour[]} */\n  behaviours = []\n\n  /** @type {Vector2D} */\n  p = []\n\n  /** @type {Vector2D} */\n  v = []\n\n  /** @type {Vector2D} */\n  a = []\n\n  /** @type {Rgb} */\n  rgb = {}\n\n  /**\n   * the Particle class\n   *\n   * @class Proton.Particle\n   * @constructor\n   * @param {Object} pObj the parameters object;\n   * for example {life:3,dead:false}\n   */\n  constructor(conf) {\n    /**\n     * The particle's id;\n     * @property id\n     * @type {string}\n     */\n    this.name = \"Particle\";\n    this.id = Puid.id(this.name);\n    this.old = {};\n    this.data = {};\n    this.behaviours = [];\n\n    this.p = new Vector2D();\n    this.v = new Vector2D();\n    this.a = new Vector2D();\n    this.old.p = new Vector2D();\n    this.old.v = new Vector2D();\n    this.old.a = new Vector2D();\n\n    this.rgb = new Rgb();\n    this.reset();\n    conf && Util.setProp(this, conf);\n  }\n\n  getDirection() {\n    return Math.atan2(this.v.x, -this.v.y) * MathUtil.N180_PI;\n  }\n\n  reset() {\n    this.life = Infinity;\n    this.age = 0;\n\n    this.dead = false;\n    this.sleep = false;\n    this.body = null;\n    this.sprite = null;\n    this.parent = null;\n\n    this.energy = 1; // Energy Loss\n    this.mass = 1;\n    this.radius = 10;\n    this.alpha = 1;\n    this.scale = 1;\n    this.rotation = 0;\n    this.color = null;\n\n    this.p.set(0, 0);\n    this.v.set(0, 0);\n    this.a.set(0, 0);\n    this.old.p.set(0, 0);\n    this.old.v.set(0, 0);\n    this.old.a.set(0, 0);\n    this.easing = ease.easeLinear;\n\n    this.rgb.reset();\n    Util.emptyObject(this.data);\n    this.removeAllBehaviours();\n\n    return this;\n  }\n\n  update(time, index) {\n    if (!this.sleep) {\n      this.age += time;\n      this.applyBehaviours(time, index);\n    }\n\n    if (this.age < this.life) {\n      const scale = this.easing(this.age / this.life);\n      this.energy = Math.max(1 - scale, 0);\n    } else {\n      this.destroy();\n    }\n  }\n\n  applyBehaviours(time, index) {\n    const length = this.behaviours.length;\n    let i;\n\n    for (i = 0; i < length; i++) {\n      this.behaviours[i] &&\n        this.behaviours[i].applyBehaviour(this, time, index);\n    }\n  }\n\n  /**\n   * @param {Behaviour} behaviour\n   */\n  addBehaviour(behaviour) {\n    this.behaviours.push(behaviour);\n\n    if (behaviour.hasOwnProperty(\"parents\")) behaviour.parents.push(this);\n    behaviour.initialize(this);\n  }\n\n  /**\n   * @param {Behaviour[]} behaviours\n   */\n  addBehaviours(behaviours) {\n    const length = behaviours.length;\n    let i;\n\n    for (i = 0; i < length; i++) {\n      this.addBehaviour(behaviours[i]);\n    }\n  }\n\n  removeBehaviour(behaviour) {\n    const index = this.behaviours.indexOf(behaviour);\n\n    if (index > -1) {\n      const behaviour = this.behaviours.splice(index, 1);\n      behaviour.parents = null;\n    }\n  }\n\n  removeAllBehaviours() {\n    Util.emptyArray(this.behaviours);\n  }\n\n  /**\n   * Destory this particle\n   * @method destroy\n   */\n  destroy() {\n    this.removeAllBehaviours();\n    this.energy = 0;\n    this.dead = true;\n    this.parent = null;\n  }\n}\n","export default {\n  /**\n   * @typedef  {Object} rgbObject\n   * @property {Number} r red value\n   * @property {Number} g green value\n   * @property {Number} b blue value\n   */\n  /**\n   * converts a hex value to a rgb object\n   *\n   * @memberof Proton#Proton.Util\n   * @method hexToRgb\n   *\n   * @param {String} h any hex value, e.g. #000000 or 000000 for black\n   *\n   * @return {rgbObject}\n   */\n  hexToRgb(h) {\n    const hex16 = h.charAt(0) === \"#\" ? h.substring(1, 7) : h;\n    const r = parseInt(hex16.substring(0, 2), 16);\n    const g = parseInt(hex16.substring(2, 4), 16);\n    const b = parseInt(hex16.substring(4, 6), 16);\n\n    return { r, g, b };\n  },\n\n  /**\n   * converts a rgb value to a rgb string\n   *\n   * @memberof Proton#Proton.Util\n   * @method rgbToHex\n   *\n   * @param {Object | Proton.hexToRgb} rgb a rgb object like in {@link Proton#Proton.}\n   *\n   * @return {String} rgb()\n   */\n  rgbToHex(rbg) {\n    return `rgb(${rbg.r}, ${rbg.g}, ${rbg.b})`;\n  },\n\n  getHex16FromParticle(p) {\n    return Number(p.rgb.r) * 65536 + Number(p.rgb.g) * 256 + Number(p.rgb.b);\n  }\n};\n","import Vector2D from \"./Vector2D\";\n\nexport default class Polar2D {\n  constructor(r, tha) {\n    this.r = Math.abs(r) || 0;\n    this.tha = tha || 0;\n  }\n\n  set(r, tha) {\n    this.r = r;\n    this.tha = tha;\n    return this;\n  }\n\n  setR(r) {\n    this.r = r;\n    return this;\n  }\n\n  setTha(tha) {\n    this.tha = tha;\n    return this;\n  }\n\n  copy(p) {\n    this.r = p.r;\n    this.tha = p.tha;\n    return this;\n  }\n\n  toVector() {\n    return new Vector2D(this.getX(), this.getY());\n  }\n\n  getX() {\n    return this.r * Math.sin(this.tha);\n  }\n\n  getY() {\n    return -this.r * Math.cos(this.tha);\n  }\n\n  normalize() {\n    this.r = 1;\n    return this;\n  }\n\n  equals(v) {\n    return v.r === this.r && v.tha === this.tha;\n  }\n\n  clear() {\n    this.r = 0.0;\n    this.tha = 0.0;\n    return this;\n  }\n\n  clone() {\n    return new Polar2D(this.r, this.tha);\n  }\n}\n","const Mat3 = {\n  create(mat3) {\n    const mat = new Float32Array(9);\n    if (mat3) this.set(mat3, mat);\n\n    return mat;\n  },\n\n  set(mat1, mat2) {\n    for (let i = 0; i < 9; i++) mat2[i] = mat1[i];\n\n    return mat2;\n  },\n\n  multiply(mat, mat2, mat3) {\n    let a00 = mat[0],\n      a01 = mat[1],\n      a02 = mat[2],\n      a10 = mat[3],\n      a11 = mat[4],\n      a20 = mat[6],\n      a21 = mat[7],\n      b00 = mat2[0],\n      b01 = mat2[1],\n      b02 = mat2[2],\n      b10 = mat2[3],\n      b11 = mat2[4],\n      b20 = mat2[6],\n      b21 = mat2[7];\n\n    mat3[0] = b00 * a00 + b01 * a10;\n    mat3[1] = b00 * a01 + b01 * a11;\n    mat3[2] = a02 * b02;\n    mat3[3] = b10 * a00 + b11 * a10;\n    mat3[4] = b10 * a01 + b11 * a11;\n    mat3[6] = b20 * a00 + b21 * a10 + a20;\n    mat3[7] = b20 * a01 + b21 * a11 + a21;\n\n    return mat3;\n  },\n\n  inverse(mat, mat3) {\n    let a00 = mat[0],\n      a01 = mat[1],\n      a10 = mat[3],\n      a11 = mat[4],\n      a20 = mat[6],\n      a21 = mat[7],\n      b01 = a11,\n      b11 = -a10,\n      b21 = a21 * a10 - a11 * a20,\n      d = a00 * b01 + a01 * b11,\n      id;\n\n    id = 1 / d;\n    mat3[0] = b01 * id;\n    mat3[1] = -a01 * id;\n    mat3[3] = b11 * id;\n    mat3[4] = a00 * id;\n    mat3[6] = b21 * id;\n    mat3[7] = (-a21 * a00 + a01 * a20) * id;\n\n    return mat3;\n  },\n\n  multiplyVec2(m, vec, mat3) {\n    let x = vec[0],\n      y = vec[1];\n\n    mat3[0] = x * m[0] + y * m[3] + m[6];\n    mat3[1] = x * m[1] + y * m[4] + m[7];\n\n    return mat3;\n  }\n};\n\nexport default Mat3;\n","import Span from \"./Span\";\nimport Util from \"../utils/Util\";\nimport MathUtil from \"./MathUtil\";\n\nexport default class ArraySpan extends Span {\n  constructor(color) {\n    super();\n    this._arr = Util.toArray(color);\n  }\n\n  getValue() {\n    const val = Util.getRandFromArray(this._arr);\n    return val === \"random\" || val === \"Random\" ? MathUtil.randomColor() : val;\n  }\n\n  /**\n   * Make sure that the color is an instance of Proton.ArraySpan, if not it makes a new instance\n   *\n   * @method setSpanValue\n   * @memberof Proton#Proton.Color\n   * @instance\n   *\n   * @param {Proton.Particle} particle\n   * @param {Number} the integrate time 1/ms\n   * @param {Int} the particle index\n   */\n  static createArraySpan(arr) {\n    if (!arr) return null;\n\n    if (arr instanceof ArraySpan) return arr;\n    else return new ArraySpan(arr);\n  }\n}\n","export default class Rectangle {\n  constructor(x, y, w, h) {\n    this.x = x;\n    this.y = y;\n\n    this.width = w;\n    this.height = h;\n\n    this.bottom = this.y + this.height;\n    this.right = this.x + this.width;\n  }\n\n  contains(x, y) {\n    if (x <= this.right && x >= this.x && y <= this.bottom && y >= this.y)\n      return true;\n    else return false;\n  }\n}\n","import Span from \"../math/Span\";\nimport Util from \"../utils/Util\";\n\nexport default class Rate {\n  /**\n   * The number of particles per second emission (a [particle]/b [s]);\n   * @namespace\n   * @memberof! Proton#\n   * @constructor\n   * @alias Rate\n   *\n   * @param {Array | Number | Span} numpan the number of each emission;\n   * @param {Array | Number | Span} timepan the time of each emission;\n   * for example: new Rate(new Span(10, 20), new Span(.1, .25));\n   */\n  constructor(numpan, timepan) {\n    this.numPan = Span.setSpanValue(Util.initValue(numpan, 1));\n    this.timePan = Span.setSpanValue(Util.initValue(timepan, 1));\n\n    this.startTime = 0;\n    this.nextTime = 0;\n    this.init();\n  }\n\n  init() {\n    this.startTime = 0;\n    this.nextTime = this.timePan.getValue();\n  }\n\n  getValue(time) {\n    this.startTime += time;\n\n    if (this.startTime >= this.nextTime) {\n      this.startTime = 0;\n      this.nextTime = this.timePan.getValue();\n\n      if (this.numPan.b === 1) {\n        if (this.numPan.getValue(false) > 0.5) return 1;\n        else return 0;\n      } else {\n        return this.numPan.getValue(true);\n      }\n    }\n\n    return 0;\n  }\n}\n","export default class Initialize {\n  reset() {}\n\n  init(emitter, particle) {\n    if (particle) {\n      this.initialize(particle);\n    } else {\n      this.initialize(emitter);\n    }\n  }\n\n  // sub class init\n  initialize(target) {}\n}\n","import Span from \"../math/Span\";\nimport Initialize from \"./Initialize\";\n\nexport default class Life extends Initialize {\n  constructor(a, b, c) {\n    super();\n\n    this.lifePan = Span.setSpanValue(a, b, c);\n    this.name = \"Life\";\n  }\n\n  initialize(target) {\n    if (this.lifePan.a === Infinity) target.life = Infinity;\n    else target.life = this.lifePan.getValue();\n  }\n}\n","import Vector2D from \"../math/Vector2D\";\n\nexport default class Zone {\n  constructor() {\n    this.vector = new Vector2D(0, 0);\n    this.random = 0;\n    this.crossType = \"dead\";\n    this.alert = true;\n  }\n\n  getPosition() {}\n\n  crossing(particle) {}\n}\n","import Zone from \"./Zone\";\n\nexport default class PointZone extends Zone {\n  constructor(x, y) {\n    super();\n\n    this.x = x;\n    this.y = y;\n  }\n\n  getPosition() {\n    this.vector.x = this.x;\n    this.vector.y = this.y;\n\n    return this.vector;\n  }\n\n  crossing(particle) {\n    if (this.alert) {\n      console.error(\"Sorry, PointZone does not support crossing method!\");\n      this.alert = false;\n    }\n  }\n}\n","import Util from \"../utils/Util\";\nimport PointZone from \"../zone/PointZone\";\nimport Initialize from \"./Initialize\";\n\nexport default class Position extends Initialize {\n  constructor(zone) {\n    super();\n    this.zone = Util.initValue(zone, new PointZone());\n    this.name = \"Position\";\n  }\n\n  reset(zone) {\n    this.zone = Util.initValue(zone, new PointZone());\n  }\n\n  initialize(target) {\n    this.zone.getPosition();\n\n    target.p.x = this.zone.vector.x;\n    target.p.y = this.zone.vector.y;\n  }\n}\n","import Proton from \"../core/Proton\";\nimport Span from \"../math/Span\";\nimport Util from \"../utils/Util\";\nimport Initialize from \"./Initialize\";\nimport Polar2D from \"../math/Polar2D\";\nimport MathUtil from \"../math/MathUtil\";\n\nexport default class Velocity extends Initialize {\n  constructor(rpan, thapan, type) {\n    super();\n\n    this.rPan = Span.setSpanValue(rpan);\n    this.thaPan = Span.setSpanValue(thapan);\n    this.type = Util.initValue(type, \"vector\");\n\n    this.name = \"Velocity\";\n  }\n\n  reset(rpan, thapan, type) {\n    this.rPan = Span.setSpanValue(rpan);\n    this.thaPan = Span.setSpanValue(thapan);\n    this.type = Util.initValue(type, \"vector\");\n  }\n\n  normalizeVelocity(vr) {\n    return vr * Proton.MEASURE;\n  }\n\n  initialize(target) {\n    if (this.type === \"p\" || this.type === \"P\" || this.type === \"polar\") {\n      const polar2d = new Polar2D(\n        this.normalizeVelocity(this.rPan.getValue()),\n        this.thaPan.getValue() * MathUtil.PI_180\n      );\n\n      target.v.x = polar2d.getX();\n      target.v.y = polar2d.getY();\n    } else {\n      target.v.x = this.normalizeVelocity(this.rPan.getValue());\n      target.v.y = this.normalizeVelocity(this.thaPan.getValue());\n    }\n  }\n}\n","import Span from \"../math/Span\";\nimport Initialize from \"./Initialize\";\n\nexport default class Mass extends Initialize {\n  constructor(a, b, c) {\n    super();\n    this.massPan = Span.setSpanValue(a, b, c);\n    this.name = \"Mass\";\n  }\n\n  initialize(target) {\n    target.mass = this.massPan.getValue();\n  }\n}\n","import Span from \"../math/Span\";\nimport Initialize from \"./Initialize\";\n\nexport default class Radius extends Initialize {\n  constructor(a, b, c) {\n    super();\n    this.radius = Span.setSpanValue(a, b, c);\n\n    this.name = \"Radius\";\n  }\n\n  reset(a, b, c) {\n    this.radius = Span.setSpanValue(a, b, c);\n  }\n\n  initialize(particle) {\n    particle.radius = this.radius.getValue();\n    particle.data.oldRadius = particle.radius;\n  }\n}\n","import Util from \"../utils/Util\";\nimport ArraySpan from \"../math/ArraySpan\";\nimport Initialize from \"./Initialize\";\n\nexport default class Body extends Initialize {\n  constructor(image, w, h) {\n    super();\n\n    this.image = this.setSpanValue(image);\n    this.w = Util.initValue(w, 20);\n    this.h = Util.initValue(h, this.w);\n    this.name = \"Body\";\n  }\n\n  initialize(particle) {\n    const imageTarget = this.image.getValue();\n\n    if (typeof imageTarget === \"string\") {\n      particle.body = {\n        width: this.w,\n        height: this.h,\n        src: imageTarget,\n        isInner: true,\n        inner: true\n      };\n    } else {\n      particle.body = imageTarget;\n    }\n  }\n\n  setSpanValue(image) {\n    return image instanceof ArraySpan ? image : new ArraySpan(image);\n  }\n}\n","import Proton from '../core/Proton';\nimport Util from '../utils/Util';\nimport ease from '../math/ease';\n\nexport default class Behaviour {\n    static id = 0;\n\n    /**\n     * The Behaviour class is the base for the other Behaviour\n     *\n     * @memberof! -\n     * @interface\n     * @alias Proton.Behaviour\n     *\n     * @param {Number} life \tthe behaviours life\n     * @param {String} easing \tThe behaviour's decaying trend, for example ease.easeOutQuart\n     *\n     * @property {String}  id \t\tThe behaviours id\n     * @param {Number} [life=Infinity] \t\t\t\tthis behaviour's life\n     * @param {String} [easing=ease.easeLinear] \tthis behaviour's easing\n     * @property {Number}  age=0 \tHow long the particle should be 'alife'\n     * @property {Number}  energy=1\n     * @property {Boolean} dead=false The particle is dead at first\n     * @property {Array}   parents \tThe behaviour's parents array\n     * @property {String}  name \tThe behaviour name\n     */\n    constructor(life, easing) {\n\n        this.life = Util.initValue(life, Infinity);\n        this.easing = ease.getEasing(easing);\n\n        this.age = 0;\n        this.energy = 1;\n        this.dead = false;\n        this.parents = [];\n\n        this.id = `Behaviour_${Behaviour.id++}`;\n        this.name = 'Behaviour';\n    }\n\n    /**\n     * Reset this behaviour's parameters\n     *\n     * @method reset\n     * @memberof Proton.Behaviour\n     * @instance\n     *\n     * @param {Number} [life=Infinity] \t\tthis behaviour's life\n     * @param {String} [easing=easeLinear] \tthis behaviour's easing\n     */\n    reset(life, easing) {\n        this.life = Util.initValue(life, Infinity);\n        this.easing = ease.getEasing(easing);\n    }\n\n    /**\n     * Normalize a force by 1:100;\n     *\n     * @method normalizeForce\n     * @memberof Proton.Behaviour\n     * @instance\n     *\n     * @param {Proton.Vector2D} force\n     */\n    normalizeForce(force) {\n        return force.multiplyScalar(Proton.MEASURE);\n    }\n\n    /**\n     * Normalize a value by 1:100;\n     *\n     * @method normalizeValue\n     * @memberof Proton.Behaviour\n     * @instance\n     *\n     * @param {Number} value\n     */\n    normalizeValue(value) {\n        return value * Proton.MEASURE;\n    }\n\n    /**\n     * Initialize the behaviour's parameters for all particles\n     *\n     * @method initialize\n     * @memberof Proton.Behaviour\n     * @instance\n     *\n     * @param {Proton.Particle} particle\n     */\n    initialize(particle) {}\n\n    /**\n     * Apply this behaviour for all particles every time\n     *\n     * @method applyBehaviour\n     * @memberof Proton.Behaviour\n     * @instance\n     *\n     * @param {Proton.Particle} particle\n     * @param {Number} \t\t\ttime the integrate time 1/ms\n     * @param {Int} \t\t\tindex the particle index\n     */\n    calculate(particle, time, index) {\n        this.age += time;\n\n        if (this.age >= this.life || this.dead) {\n            this.energy = 0;\n            this.dead = true;\n            this.destroy();\n        } else {\n            const scale = this.easing(particle.age / particle.life);\n            this.energy = Math.max(1 - scale, 0);\n        }\n    }\n\n    /**\n     * Destory this behaviour\n     *\n     * @method destroy\n     * @memberof Proton.Behaviour\n     * @instance\n     */\n    destroy() {\n        let i = this.parents.length;\n        while (i--) {\n            this.parents[i].removeBehaviour(this);\n        }\n\n        this.parents.length = 0;\n    }\n}\n","import Vector2D from '../math/Vector2D';\nimport Behaviour from './Behaviour';\n\nexport default class Force extends Behaviour {\n\n\t/**\n\t * @memberof! Proton#\n\t * @augments Proton.Behaviour\n\t * @constructor\n\t * @alias Proton.Force\n\t *\n\t * @param {Number} fx\n\t * @param {Number} fy\n\t * @param {Number} [life=Infinity] \t\t\tthis behaviour's life\n\t * @param {String} [easing=ease.easeLinear] \tthis behaviour's easing\n\t *\n\t * @property {String} name The Behaviour name\n\t */\n\tconstructor(fx, fy, life, easing) {\n\t\tsuper(life, easing);\n\n\t\tthis.force = this.normalizeForce(new Vector2D(fx, fy));\n\t\tthis.name = 'Force';\n\t}\n\n\t/**\n\t * Reset this behaviour's parameters\n\t *\n\t * @method reset\n\t * @memberof Proton#Proton.Force\n\t * @instance\n\t *\n\t * @param {Number} fx\n\t * @param {Number} fy\n\t * @param {Number} [life=Infinity] \t\t\tthis behaviour's life\n\t * @param {String} [easing=ease.easeLinear] \tthis behaviour's easing\n\t */\n\treset(fx, fy, life, easing) {\n\t\tthis.force = this.normalizeForce(new Vector2D(fx, fy));\n\n\t\tlife && super.reset(life, easing);\n\t}\n\n\t/**\n\t * Apply this behaviour for all particles every time\n\t *\n\t * @method applyBehaviour\n\t * @memberof Proton#Proton.Force\n\t * @instance\n\t *\n\t * @param {Proton.Particle} particle\n\t * @param {Number} the integrate time 1/ms\n\t * @param {Int} the particle index\n\t */\n\tapplyBehaviour(particle, time, index) {\n\t\tthis.calculate(particle, time, index);\n\t\tparticle.a.add(this.force);\n\t}\n}","import Util from \"../utils/Util\";\nimport Vector2D from \"../math/Vector2D\";\nimport Behaviour from \"./Behaviour\";\n\nexport default class Attraction extends Behaviour {\n  /**\n   * This behaviour let the particles follow one specific Proton.Vector2D\n   *\n   * @memberof! Proton#\n   * @augments Proton.Behaviour\n   * @constructor\n   * @alias Proton.Attraction\n   *\n   * @todo add description for 'force' and 'radius'\n   *\n   * @param {Proton.Vector2D} targetPosition the attraction point coordinates\n   * @param {Number} [force=100]\n   * @param {Number} [radius=1000]\n   * @param {Number} [life=Infinity] \t\t\t\tthis behaviour's life\n   * @param {String} [easing=ease.easeLinear] \tthis behaviour's easing\n   *\n   * @property {Proton.Vector2D} targetPosition\n   * @property {Number} radius\n   * @property {Number} force\n   * @property {Number} radiusSq\n   * @property {Proton.Vector2D} attractionForce\n   * @property {Number} lengthSq\n   * @property {String} name The Behaviour name\n   */\n  constructor(targetPosition, force, radius, life, easing) {\n    super(life, easing);\n\n    this.targetPosition = Util.initValue(targetPosition, new Vector2D());\n    this.radius = Util.initValue(radius, 1000);\n    this.force = Util.initValue(this.normalizeValue(force), 100);\n\n    this.radiusSq = this.radius * this.radius;\n    this.attractionForce = new Vector2D();\n    this.lengthSq = 0;\n\n    this.name = \"Attraction\";\n  }\n\n  /**\n   * Reset this behaviour's parameters\n   *\n   * @method reset\n   * @memberof Proton#Proton.Attraction\n   * @instance\n   *\n   * @todo add description for 'force' and 'radius'\n   *\n   * @param {Proton.Vector2D} targetPosition the attraction point coordinates\n   * @param {Number} [force=100]\n   * @param {Number} [radius=1000]\n   * @param {Number} [life=Infinity] \t\t\t\tthis behaviour's life\n   * @param {String} [easing=ease.easeLinear] \tthis behaviour's easing\n   */\n  reset(targetPosition, force, radius, life, easing) {\n    this.targetPosition = Util.initValue(targetPosition, new Vector2D());\n    this.radius = Util.initValue(radius, 1000);\n    this.force = Util.initValue(this.normalizeValue(force), 100);\n\n    this.radiusSq = this.radius * this.radius;\n    this.attractionForce = new Vector2D();\n    this.lengthSq = 0;\n\n    life && super.reset(life, easing);\n  }\n\n  /**\n   * Apply this behaviour for all particles every time\n   *\n   * @memberof Proton#Proton.Attraction\n   * @method applyBehaviour\n   * @instance\n   *\n   * @param {Proton.Particle} particle\n   * @param {Number} \t\t\ttime the integrate time 1/ms\n   * @param {Int} \t\t\tindex the particle index\n   */\n  applyBehaviour(particle, time, index) {\n    this.calculate(particle, time, index);\n\n    this.attractionForce.copy(this.targetPosition);\n    this.attractionForce.sub(particle.p);\n    this.lengthSq = this.attractionForce.lengthSq();\n\n    if (this.lengthSq > 0.00004 && this.lengthSq < this.radiusSq) {\n      this.attractionForce.normalize();\n      this.attractionForce.multiplyScalar(1 - this.lengthSq / this.radiusSq);\n      this.attractionForce.multiplyScalar(this.force);\n\n      particle.a.add(this.attractionForce);\n    }\n  }\n}\n","import Vector2D from \"../math/Vector2D\";\nimport MathUtil from \"../math/MathUtil\";\nimport Behaviour from \"./Behaviour\";\n\nexport default class RandomDrift extends Behaviour {\n  /**\n   * @memberof! Proton#\n   * @augments Behaviour\n   * @constructor\n   * @alias RandomDrift\n   *\n   * @param {Number} driftX \t\t\t\tX value of the new Vector2D\n   * @param {Number} driftY  \t\t\t\tY value of the new Vector2D\n   * @param {Number} delay \t\t\t\tHow much delay the drift should have\n   * @param {Number} [life=Infinity] \t\tthis behaviour's life\n   * @param {String} [easing=easeLinear] \tthis behaviour's easing\n   *\n   * @property {Number} time The time of the drift\n   * @property {String} name The Behaviour name\n   */\n  constructor(driftX, driftY, delay, life, easing) {\n    super(life, easing);\n\n    this.reset(driftX, driftY, delay);\n    this.time = 0;\n    this.name = \"RandomDrift\";\n  }\n\n  /**\n   * Reset this behaviour's parameters\n   *\n   * @method reset\n   * @memberof Proton#RandomDrift\n   * @instance\n   *\n   * @param {Number} driftX \t\t\t\tX value of the new Vector2D\n   * @param {Number} driftY  \t\t\t\tY value of the new Vector2D\n   * @param {Number} delay \t\t\t\tHow much delay the drift should have\n   * @param {Number} [life=Infinity] \t\tthis behaviour's life\n   * @param {String} [easing=easeLinear] \tthis behaviour's easing\n   */\n  reset(driftX, driftY, delay, life, easing) {\n    this.panFoce = new Vector2D(driftX, driftY);\n    this.panFoce = this.normalizeForce(this.panFoce);\n    this.delay = delay;\n\n    life && super.reset(life, easing);\n  }\n\n  initialize(particle) {\n    particle.data.time = 0;\n  }\n\n  /**\n   * Apply this behaviour for all particles every time\n   *\n   * @method applyBehaviour\n   * @memberof Proton#RandomDrift\n   * @instance\n   *\n   * @param {Particle} particle\n   * @param {Number} \t\t\ttime the integrate time 1/ms\n   * @param {Int} \t\t\tindex the particle index\n   */\n  applyBehaviour(particle, time, index) {\n    this.calculate(particle, time, index);\n    particle.data.time += time;\n\n    if (particle.data.time >= this.delay) {\n      particle.a.addXY(\n        MathUtil.randomAToB(-this.panFoce.x, this.panFoce.x),\n        MathUtil.randomAToB(-this.panFoce.y, this.panFoce.y)\n      );\n\n      particle.data.time = 0;\n    }\n  }\n}\n","import Force from './Force';\n\nexport default class Gravity extends Force {\n\n\t/**\n\t * @memberof! Proton#\n\t * @augments Proton#Proton.Force\n\t * @constructor\n\t * @alias Proton.Gravity\n\t *\n\t * @param {Number} g \t\t\t\t\t\t\tGravity\n\t * @param {Number} [life=Infinity] \t\t\t\tthis behaviour's life\n\t * @param {String} [easing=ease.easeLinear] \tthis behaviour's easing\n\t *\n\t * @property {String} name The Behaviour name\n\t */\n\tconstructor(g, life, easing) {\n\t\tsuper(0, g, life, easing);\n\t\tthis.name = 'Gravity';\n\t}\n\n\t/**\n\t * Reset this behaviour's parameters\n\t *\n\t * @method reset\n\t * @memberof Proton#Proton.Gravity\n\t * @instance\n\t *\n\t * @param {Number} g \t\t\t\t\t\t\tGravity\n\t * @param {Number} [life=Infinity] \t\t\t\tthis behaviour's life\n\t * @param {String} [easing=ease.easeLinear] \tthis behaviour's easing\n\t */\n\treset(g, life, easing) {\n\t\tsuper.reset(0, g, life, easing);\n\t}\n}","import Util from '../utils/Util';\nimport Vector2D from '../math/Vector2D';\nimport Behaviour from './Behaviour';\n\nexport default class Collision extends Behaviour {\n\n\t/**\n\t * The callback after collision\n\t *\n\t * @callback Callback\n\t *\n\t * @param {Proton.Particle} particle\n\t * @param {Proton.Paritcle} otherParticle\n\t */\n\t/**\n\t * @memberof! Proton#\n\t * @augments Proton.Behaviour\n\t * @constructor\n\t * @alias Proton.Collision\n\t *\n\t * @todo add description to mass\n\t *\n\t * @param {Proton.Emitter} \t[emitter=null] \t\tthe attraction point coordinates\n\t * @param {Boolean} \t\t[mass=true]\n\t * @param {Callback}\t \t[callback=null]\t\tthe callback after the collision\n\t * @param {Number} [life=Infinity] \t\t\t\tthis behaviour's life\n\t * @param {String} [easing=ease.easeLinear] \tthis behaviour's easing\n\t *\n\t * @property {String} name The Behaviour name\n\t */\n\tconstructor(emitter, mass, callback, life, easing) {\n\t\tsuper(life, easing);\n\n\t\tthis.reset(emitter, mass, callback);\n\t\tthis.name = 'Collision';\n\t}\n\n\t/**\n\t * Reset this behaviour's parameters\n\t *\n\t * @memberof Proton#Proton.Collision\n\t * @method reset\n\t * @instance\n\t *\n\t * @todo add description to mass\n\t *\n\t * @param {Proton.Emitter} \t[emitter=null] \t\tthe attraction point coordinates\n\t * @param {Boolean} \t\t[mass=true]\n\t * @param {Callback}\t \t[callback=null]\t\tthe callback after the collision\n\t * @param {Number} \t\t\t[life=Infinity] \tthis behaviour's life\n\t * @param {String} [easing=ease.easeLinear] \tthis behaviour's easing\n\t */\n\treset(emitter, mass, callback, life, easing) {\n\t\tthis.emitter = Util.initValue(emitter, null);\n\t\tthis.mass = Util.initValue(mass, true);\n\t\tthis.callback = Util.initValue(callback, null);\n\n\t\tthis.collisionPool = [];\n\t\tthis.delta = new Vector2D();\n\n\t\tlife && super.reset(life, easing);\n\t}\n\n\t/**\n\t * Apply this behaviour for all particles every time\n\t *\n\t * @memberof Proton#Proton.Collision\n\t * @method applyBehaviour\n\t * @instance\n\t *\n\t * @param {Proton.Particle} particle\n\t * @param {Number} \t\t\ttime the integrate time 1/ms\n\t * @param {Int} \t\t\tindex the particle index\n\t */\n\tapplyBehaviour(particle, time, index) {\n\t\tconst newPool = this.emitter ? this.emitter.particles.slice(index) : this.pool.slice(index);\n\t\tconst length = newPool.length;\n\n\t\tlet otherParticle;\n\t\tlet lengthSq;\n\t\tlet overlap;\n\t\tlet totalMass;\n\t\tlet averageMass1, averageMass2;\n\t\tlet i;\n\n\t\tfor (i = 0; i < length; i++) {\n\t\t\totherParticle = newPool[i];\n\n\t\t\tif (otherParticle !== particle) {\n\t\t\t\tthis.delta.copy(otherParticle.p);\n\t\t\t\tthis.delta.sub(particle.p);\n\n\t\t\t\tlengthSq = this.delta.lengthSq();\n\t\t\t\tconst distance = particle.radius + otherParticle.radius;\n\n\t\t\t\tif (lengthSq <= distance * distance) {\n\t\t\t\t\toverlap = distance - Math.sqrt(lengthSq);\n\t\t\t\t\toverlap += 0.5;\n\n\t\t\t\t\ttotalMass = particle.mass + otherParticle.mass;\n\t\t\t\t\taverageMass1 = this.mass ? otherParticle.mass / totalMass : 0.5;\n\t\t\t\t\taverageMass2 = this.mass ? particle.mass / totalMass : 0.5;\n\n\t\t\t\t\tparticle.p.add(this.delta.clone().normalize().multiplyScalar(overlap * -averageMass1));\n\t\t\t\t\totherParticle.p.add(this.delta.normalize().multiplyScalar(overlap * averageMass2));\n\n\t\t\t\t\tthis.callback && this.callback(particle, otherParticle);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}","import Util from '../utils/Util';\nimport Behaviour from './Behaviour';\n\nexport default class CrossZone extends Behaviour {\n\n    /**\n     * Defines what happens if the particles come to the end of the specified zone\n     *\n     * @memberof! Proton#\n     * @augments Proton.Behaviour\n     * @constructor\n     * @alias Proton.CrossZone\n     *\n     * @param {Proton.Zone} zone \t\t\t\t\t\tcan be any Proton.Zone - e.g. Proton.RectZone()\n     * @param {String} \t\t[crossType=dead] \t\t\twhat happens if the particles pass the zone - allowed strings: dead | bound | cross\n     * @param {Number} \t\t[life=Infinity] \t\t\tthis behaviour's life\n     * @param {String} \t\t[easing=ease.easeLinear] \tthis behaviour's easing\n     *\n     * @property {String} name The Behaviour name\n     */\n    constructor(zone, crossType, life, easing) {\n        super(life, easing);\n\n        this.reset(zone, crossType);\n        this.name = 'CrossZone';\n    }\n\n    /**\n     * Reset this behaviour's parameters\n     *\n     * @method reset\n     * @memberof Proton#Proton.CrossZone\n     * @instance\n     *\n     * @param {Proton.Zone} zone \t\t\t\tcan be any Proton.Zone - e.g. Proton.RectZone()\n     * @param {String} \t\t[crossType=dead] \twhat happens if the particles pass the zone - allowed strings: dead | bound | cross\n     * @param {Number} \t\t[life=Infinity] \tthis behaviour's life\n     * @param {String} \t\t[easing=easeLinear]\tthis behaviour's easing\n     */\n    reset(zone, crossType, life, easing) {\n        this.zone = zone;\n        this.zone.crossType = Util.initValue(crossType, 'dead');\n\n        life && super.reset(life, easing);\n    }\n\n    /**\n     * Apply this behaviour for all particles every time\n     *\n     * @method applyBehaviour\n     * @memberof Proton#Proton.CrossZone\n     * @instance\n     *\n     * @param {Proton.Particle} particle\n     * @param {Number} the integrate time 1/ms\n     * @param {Int} the particle index\n     */\n    applyBehaviour(particle, time, index) {\n        this.calculate(particle, time, index);\n        this.zone.crossing(particle);\n    };\n}","import Util from \"../utils/Util\";\nimport Span from \"../math/Span\";\nimport Behaviour from \"./Behaviour\";\n\nexport default class Alpha extends Behaviour {\n  /**\n   * @memberof! Proton#\n   * @augments Proton.Behaviour\n   * @constructor\n   * @alias Proton.Alpha\n   *\n   * @todo add description for 'a' and 'b'\n   *\n   * @param {Number} a\n   * @param {String} b\n   * @param {Number} [life=Infinity] \t\t\t\tthis behaviour's life\n   * @param {String} [easing=ease.easeLinear] \tthis behaviour's easing\n   *\n   * @property {String} name The Behaviour name\n   */\n  constructor(a, b, life, easing) {\n    super(life, easing);\n\n    this.reset(a, b);\n    this.name = \"Alpha\";\n  }\n\n  /**\n   * Reset this behaviour's parameters\n   *\n   * @method reset\n   * @memberof Proton#Proton.Alpha\n   * @instance\n   *\n   * @todo add description for 'a' and 'b'\n   *\n   * @param {Number} a\n   * @param {String} b\n   * @param {Number} [life=Infinity] \t\t\t\tthis behaviour's life\n   * @param {String} [easing=ease.easeLinear] \tthis behaviour's easing\n   */\n  reset(a, b, life, easing) {\n    this.same = b === null || b === undefined ? true : false;\n    this.a = Span.setSpanValue(Util.initValue(a, 1));\n    this.b = Span.setSpanValue(b);\n\n    life && super.reset(life, easing);\n  }\n\n  /**\n   * Sets the new alpha value of the particle\n   *\n   * @method initialize\n   * @memberof Proton#Proton.Alpha\n   * @instance\n   *\n   * @param {Proton.Particle} particle A single Proton generated particle\n   */\n  initialize(particle) {\n    particle.data.alphaA = this.a.getValue();\n\n    if (this.same) particle.data.alphaB = particle.data.alphaA;\n    else particle.data.alphaB = this.b.getValue();\n  }\n\n  /**\n   * @method applyBehaviour\n   * @memberof Proton#Proton.Alpha\n   * @instance\n   *\n   * @param {Proton.Particle} particle\n   * @param {Number} \t\t\ttime the integrate time 1/ms\n   * @param {Int} \t\t\tindex the particle index\n   */\n  applyBehaviour(particle, time, index) {\n    this.calculate(particle, time, index);\n\n    particle.alpha =\n      particle.data.alphaB +\n      (particle.data.alphaA - particle.data.alphaB) * this.energy;\n\n    if (particle.alpha < 0.001) particle.alpha = 0;\n  }\n}\n","import Span from \"../math/Span\";\nimport Util from '../utils/Util';\nimport Behaviour from './Behaviour';\n\nexport default class Scale extends Behaviour {\n\n\t/**\n\t * @memberof! Proton#\n\t * @augments Proton.Behaviour\n\t * @constructor\n\t * @alias Proton.Scale\n\t *\n\t * @todo add description for 'a' and 'b'\n\t *\n\t * @param {Number} a\n\t * @param {String} b\n\t * @param {Number} [life=Infinity] \t\t\t\tthis behaviour's life\n\t * @param {String} [easing=ease.easeLinear] \tthis behaviour's easing\n\t *\n\t * @property {String} name The Behaviour name\n\t */\n\tconstructor(a, b, life, easing) {\n\t\tsuper(life, easing);\n\n\t\tthis.reset(a, b);\n\t\tthis.name = 'Scale';\n\t}\n\n\t/**\n\t * Reset this behaviour's parameters\n\t *\n\t * @method reset\n\t * @memberof Proton#Proton.Scale\n\t * @instance\n\t *\n\t * @param {Number} a\n\t * @param {String} b\n\t * @param {Number} [life=Infinity] \t\t\t\tthis behaviour's life\n\t * @param {String} [easing=ease.easeLinear] \tthis behaviour's easing\n\t */\n\treset(a, b, life, easing) {\n\t\tthis.same = b === null || b === undefined ? true : false;\n\t\tthis.a = Span.setSpanValue(Util.initValue(a, 1));\n\t\tthis.b = Span.setSpanValue(b);\n\n\t\tlife && super.reset(life, easing);\n\t}\n\n\t/**\n\t * Initialize the behaviour's parameters for all particles\n\t *\n\t * @method initialize\n\t * @memberof Proton#Proton.Scale\n\t * @instance\n\t *\n\t * @param {Proton.Particle} particle\n\t */\n\tinitialize(particle) {\n\t\tparticle.data.scaleA = this.a.getValue();\n\t\tparticle.data.oldRadius = particle.radius;\n\t\tparticle.data.scaleB = this.same ? particle.data.scaleA : this.b.getValue();\n\t};\n\n\t/**\n\t * Apply this behaviour for all particles every time\n\t *\n\t * @method applyBehaviour\n\t * @memberof Proton#Proton.Scale\n\t * @instance\n\t *\n\t * @param {Proton.Particle} particle\n\t * @param {Number} \t\t\ttime the integrate time 1/ms\n\t * @param {Int} \t\t\tindex the particle index\n\t */\n\tapplyBehaviour(particle, time, index) {\n\t\tthis.calculate(particle, time, index);\n\t\tparticle.scale = particle.data.scaleB + (particle.data.scaleA - particle.data.scaleB) * this.energy;\n\n\t\tif (particle.scale < 0.0001) particle.scale = 0;\n\t\tparticle.radius = particle.data.oldRadius * particle.scale;\n\t}\n}","import Span from \"../math/Span\";\nimport Util from '../utils/Util';\nimport Behaviour from './Behaviour';\n\nexport default class Rotate extends Behaviour {\n\n\t/**\n\t * @memberof! Proton#\n\t * @augments Proton.Behaviour\n\t * @constructor\n\t * @alias Proton.Rotate\n\t *\n\t * @todo add description for 'a', 'b' and 'style'\n\t *\n\t * @param {String} [influence=Velocity] The rotation's influence\n\t * @param {String} b\n\t * @param {String} [style=to]\n\t * @param {Number} [life=Infinity] \t\t\t\tthis behaviour's life\n\t * @param {String} [easing=ease.easeLinear] \tthis behaviour's easing\n\t *\n\t * @property {String} name The Behaviour name\n\t */\n\tconstructor(influence, b, style, life, easing) {\n\t\tsuper(life, easing);\n\n\t\tthis.reset(influence, b, style);\n\t\tthis.name = 'Rotate';\n\t}\n\n\t/**\n\t * Reset this behaviour's parameters\n\t *\n\t * @method reset\n\t * @memberof Proton#Proton.Rotate\n\t * @instance\n\t *\n\t * @todo add description for 'a', 'b' and 'style'\n\t *\n\t * @param {String} a\n\t * @param {String} b\n\t * @param {String} [style=to]\n\t * @param {Number} [life=Infinity] \t\t\t\tthis behaviour's life\n\t * @param {String} [easing=ease.easeLinear] \tthis behaviour's easing\n\t */\n\treset(a, b, style, life, easing) {\n\t\tthis.same = b === null || b === undefined ? true : false;\n\n\t\tthis.a = Span.setSpanValue(Util.initValue(a, 'Velocity'));\n\t\tthis.b = Span.setSpanValue(Util.initValue(b, 0));\n\t\tthis.style = Util.initValue(style, 'to');\n\n\t\tlife && super.reset(life, easing);\n\t}\n\n\t/**\n\t * Initialize the behaviour's parameters for all particles\n\t *\n\t * @method initialize\n\t * @memberof Proton#Proton.Rotate\n\t * @instance\n\t *\n\t * @param {Proton.Particle} particle\n\t */\n\tinitialize(particle) {\n\t\tparticle.rotation = this.a.getValue();\n\t\tparticle.data.rotationA = this.a.getValue();\n\n\t\tif (!this.same) particle.data.rotationB = this.b.getValue();\n\t};\n\n\t/**\n\t * Apply this behaviour for all particles every time\n\t *\n\t * @method applyBehaviour\n\t * @memberof Proton#Proton.Rotate\n\t * @instance\n\t *\n\t * @param {Proton.Particle} particle\n\t * @param {Number} \t\t\ttime the integrate time 1/ms\n\t * @param {Int} \t\t\tindex the particle index\n\t */\n\tapplyBehaviour(particle, time, index) {\n\t\tthis.calculate(particle, time, index);\n\n\t\tif (!this.same) {\n\t\t\tif (this.style === 'to' || this.style === 'TO' || this.style === '_') {\n\t\t\t\tparticle.rotation += particle.data.rotationB + (particle.data.rotationA - particle.data.rotationB) * this.energy\n\t\t\t} else {\n\t\t\t\tparticle.rotation += particle.data.rotationB;\n\t\t\t}\n\t\t} else if (this.a.a === 'V' || this.a.a === 'Velocity' || this.a.a === 'v') {\n\t\t\t// beta...\n\t\t\tparticle.rotation = particle.getDirection();\n\t\t}\n\t}\n\n}\n","import ColorUtil from \"../utils/ColorUtil\";\nimport ArraySpan from \"../math/ArraySpan\";\nimport Behaviour from \"./Behaviour\";\n\nexport default class Color extends Behaviour {\n  /**\n   * @memberof! Proton#\n   * @augments Proton.Behaviour\n   * @constructor\n   * @alias Proton.Color\n   *\n   * @param {Proton.ArraySpan | String} a the string should be a hex e.g. #000000 for black\n   * @param {Proton.ArraySpan | String} b the string should be a hex e.g. #000000 for black\n   * @param {Number} [life=Infinity] \tthis behaviour's life\n   * @param {String} [easing=easeLinear] \tthis behaviour's easing\n   *\n   * @property {String} name The Behaviour name\n   */\n  constructor(a, b, life, easing) {\n    super(life, easing);\n\n    this.reset(a, b);\n    this.name = \"Color\";\n  }\n\n  /**\n   * Reset this behaviour's parameters\n   *\n   * @method reset\n   * @memberof Proton#Proton.Color\n   * @instance\n   *\n   * @param {Proton.ArraySpan | String} a the string should be a hex e.g. #000000 for black\n   * @param {Proton.ArraySpan | String} b the string should be a hex e.g. #000000 for black\n   * @param {Number} [life=Infinity] \tthis behaviour's life\n   * @param {String} [easing=easeLinear] \tthis behaviour's easing\n   */\n  reset(a, b, life, easing) {\n    this.a = ArraySpan.createArraySpan(a);\n    this.b = ArraySpan.createArraySpan(b);\n    life && super.reset(life, easing);\n  }\n\n  /**\n   * Initialize the behaviour's parameters for all particles\n   *\n   * @method initialize\n   * @memberof Proton#Proton.Color\n   * @instance\n   *\n   * @param {Proton.Particle} particle\n   */\n  initialize(particle) {\n    particle.color = this.a.getValue();\n    particle.data.colorA = ColorUtil.hexToRgb(particle.color);\n\n    if (this.b) particle.data.colorB = ColorUtil.hexToRgb(this.b.getValue());\n  }\n\n  /**\n   * Apply this behaviour for all particles every time\n   *\n   * @method applyBehaviour\n   * @memberof Proton#Proton.Color\n   * @instance\n   *\n   * @param {Proton.Particle} particle\n   * @param {Number} the integrate time 1/ms\n   * @param {Int} the particle index\n   */\n  applyBehaviour(particle, time, index) {\n    if (this.b) {\n      this.calculate(particle, time, index);\n\n      particle.rgb.r =\n        particle.data.colorB.r +\n        (particle.data.colorA.r - particle.data.colorB.r) * this.energy;\n      particle.rgb.g =\n        particle.data.colorB.g +\n        (particle.data.colorA.g - particle.data.colorB.g) * this.energy;\n      particle.rgb.b =\n        particle.data.colorB.b +\n        (particle.data.colorA.b - particle.data.colorB.b) * this.energy;\n\n      particle.rgb.r = Math.floor(particle.rgb.r);\n      particle.rgb.g = Math.floor(particle.rgb.g);\n      particle.rgb.b = Math.floor(particle.rgb.b);\n    } else {\n      particle.rgb.r = particle.data.colorA.r;\n      particle.rgb.g = particle.data.colorA.g;\n      particle.rgb.b = particle.data.colorA.b;\n    }\n  }\n}\n","import MathUtil from \"../math/MathUtil\";\nimport Vector2D from \"../math/Vector2D\";\nimport Span from \"../math/Span\";\nimport Behaviour from \"./Behaviour\";\n\nconst CHANGING = \"changing\";\n\nexport default class Cyclone extends Behaviour {\n  /**\n   * @memberof! Proton#\n   * @augments Proton.Behaviour\n   * @constructor\n   * @alias Proton.Cyclone\n   *\n   * @param {Number} angle\n   * @param {Number} force\n   * @param {Number} [life=Infinity] \t\t\tthis behaviour's life\n   * @param {String} [easing=ease.easeLinear] \tthis behaviour's easing\n   *\n   * @property {String} name The Behaviour name\n   */\n  constructor(angle, force, life, easing) {\n    super(life, easing);\n    this.setAngleAndForce(angle, force);\n    this.name = \"Cyclone\";\n  }\n\n  setAngleAndForce(angle, force) {\n    this.force = CHANGING;\n    this.angle = MathUtil.PI / 2;\n\n    if (angle === \"right\") {\n      this.angle = MathUtil.PI / 2;\n    } else if (angle === \"left\") {\n      this.angle = -MathUtil.PI / 2;\n    } else if (angle === \"random\") {\n      this.angle = \"random\";\n    } else if (angle instanceof Span) {\n      this.angle = \"span\";\n      this.span = angle;\n    } else if (angle) {\n      this.angle = angle;\n    }\n\n    if (\n      String(force).toLowerCase() === \"changing\" ||\n      String(force).toLowerCase() === \"chang\" ||\n      String(force).toLowerCase() === \"auto\"\n    ) {\n      this.force = CHANGING;\n    } else if (force) {\n      this.force = force;\n    }\n  }\n\n  /**\n   * Reset this behaviour's parameters\n   *\n   * @method reset\n   * @memberof Proton#Proton.Cyclone\n   * @instance\n   *\n   * @param {Number} angle\n   * @param {Number} force\n   * @param {Number} [life=Infinity] \t\t\tthis behaviour's life\n   * @param {String} [easing=ease.easeLinear] \tthis behaviour's easing\n   */\n  reset(angle, force, life, easing) {\n    this.angle = MathUtil.PI / 2;\n    this.setAngleAndForce(angle, force);\n    life && super.reset(life, easing);\n  }\n\n  initialize(particle) {\n    if (this.angle === \"random\") {\n      particle.data.cangle = MathUtil.randomAToB(-MathUtil.PI, MathUtil.PI);\n    } else if (this.angle === \"span\") {\n      particle.data.cangle = this.span.getValue();\n    }\n\n    particle.data.cyclone = new Vector2D(0, 0);\n  }\n\n  /**\n   * Apply this behaviour for all particles every time\n   *\n   * @method applyBehaviour\n   * @memberof Proton#Proton.Cyclone\n   * @instance\n   *\n   * @param {Proton.Particle} particle\n   * @param {Number} the integrate time 1/ms\n   * @param {Int} the particle index\n   */\n  applyBehaviour(particle, time, index) {\n    this.calculate(particle, time, index);\n\n    let length;\n    let gradient = particle.v.getGradient();\n    if (this.angle === \"random\" || this.angle === \"span\") {\n      gradient += particle.data.cangle;\n    } else {\n      gradient += this.angle;\n    }\n\n    if (this.force === CHANGING) {\n      length = particle.v.length() / 100;\n    } else {\n      length = this.force;\n    }\n\n    particle.data.cyclone.x = length * Math.cos(gradient);\n    particle.data.cyclone.y = length * Math.sin(gradient);\n    particle.data.cyclone = this.normalizeForce(particle.data.cyclone);\n    particle.a.add(particle.data.cyclone);\n  }\n}\n","import Attraction from './Attraction';\n\nexport default class Repulsion extends Attraction {\n\n\t/**\n\t * The oppisite of Proton.Attraction - turns the force\n\t *\n\t * @memberof! Proton#\n\t * @augments Proton#Proton.Attraction\n\t * @constructor\n\t * @alias Proton.Repulsion\n\t *\n\t * @todo add description for 'force' and 'radius'\n\t *\n\t * @param {Proton.Vector2D} targetPosition the attraction point coordinates\n\t * @param {Number} [force=100]\n\t * @param {Number} [radius=1000]\n\t * @param {Number} [life=Infinity] \t\t\t\tthis behaviour's life\n\t * @param {String} [easing=ease.easeLinear] \tthis behaviour's easing\n\t *\n\t * @property {Number} force\n\t * @property {String} name The Behaviour name\n\t */\n\tconstructor(targetPosition, force, radius, life, easing) {\n\t\tsuper(targetPosition, force, radius, life, easing);\n\n\t\tthis.force *= -1;\n\t\tthis.name = 'Repulsion';\n\t}\n\n\t/**\n\t * Reset this behaviour's parameters\n\t *\n\t * @method reset\n\t * @memberof Proton#Proton.Repulsion\n\t * @instance\n\t *\n\t * @todo add description for 'force' and 'radius'\n\t *\n\t * @param {Proton.Vector2D} targetPosition the attraction point coordinates\n\t * @param {Number} [force=100]\n\t * @param {Number} [radius=1000]\n\t * @param {Number} [life=Infinity] \t\t\t\tthis behaviour's life\n\t * @param {String} [easing=ease.easeLinear] \tthis behaviour's easing\n\t */\n\treset(targetPosition, force, radius, life, easing) {\n\t\tsuper.reset(targetPosition, force, radius, life, easing);\n\t\tthis.force *= -1;\n\t}\n}\n","import Util from '../utils/Util';\nimport Vector2D from '../math/Vector2D';\nimport Behaviour from './Behaviour';\n\nexport default class GravityWell extends Behaviour {\n\n\t/**\n\t * @memberof! Proton#\n\t * @augments Behaviour\n\t * @constructor\n\t * @alias GravityWell\n\t *\n\t * @param {Vector2D} [centerPoint=new Vector2D] The point in the center\n\t * @param {Number} [force=100]\t\t\t\t\tThe force\n\t * @param {Number} [life=Infinity]\t\t\t\tthis behaviour's life\n\t * @param {String} [easing=easeLinear]\tthis behaviour's easing\n\t *\n\t * @property {String} name The Behaviour name\n\t */\n\tconstructor(centerPoint, force, life, easing) {\n\t\tsuper(life, easing);\n\n\t\tthis.distanceVec = new Vector2D();\n\t\tthis.centerPoint = Util.initValue(centerPoint, new Vector2D);\n\t\tthis.force = Util.initValue(this.normalizeValue(force), 100);\n\n\t\tthis.name = 'GravityWell';\n\t}\n\n\t/**\n\t * Reset this behaviour's parameters\n\t *\n\t * @method reset\n\t * @memberof Proton#GravityWell\n\t * @instance\n\t *\n\t * @param {Vector2D} [centerPoint=new Vector2D] The point in the center\n\t * @param {Number} [force=100]\t\t\t\t\tThe force\n\t * @param {Number} [life=Infinity]\t\t\t\tthis behaviour's life\n\t * @param {String} [easing=easeLinear]\tthis behaviour's easing\n\t */\n\treset(centerPoint, force, life, easing) {\n\t\tthis.distanceVec = new Vector2D();\n\t\tthis.centerPoint = Util.initValue(centerPoint, new Vector2D);\n\t\tthis.force = Util.initValue(this.normalizeValue(force), 100);\n\n\t\tlife && super.reset(life, easing);\n\t};\n\n\t/**\n\t * @inheritdoc\n\t */\n\tinitialize(particle) {\n\t};\n\n\t/**\n\t * Apply this behaviour for all particles every time\n\t *\n\t * @method applyBehaviour\n\t * @memberof Proton#GravityWell\n\t * @instance\n\t *\n\t * @param {Particle} particle\n\t * @param {Number} the integrate time 1/ms\n\t * @param {Int} the particle index\n\t */\n\tapplyBehaviour(particle, time, index) {\n\t\tthis.distanceVec.set(this.centerPoint.x - particle.p.x, this.centerPoint.y - particle.p.y);\n\t\tconst distanceSq = this.distanceVec.lengthSq();\n\n\t\tif (distanceSq !== 0) {\n\t\t\tconst distance = this.distanceVec.length();\n\t\t\tconst factor = (this.force * time) / (distanceSq * distance);\n\n\t\t\tparticle.v.x += factor * this.distanceVec.x;\n\t\t\tparticle.v.y += factor * this.distanceVec.y;\n\t\t}\n\t}\n}","import Util from \"../utils/Util\";\nimport Initialize from \"./Initialize\";\nimport MathUtil from \"../math/MathUtil\";\n\nexport default {\n  initialize(emitter, particle, initializes) {\n    const length = initializes.length;\n    let i;\n\n    for (i = 0; i < length; i++) {\n      if (initializes[i] instanceof Initialize) {\n        initializes[i].init(emitter, particle);\n      } else {\n        this.init(emitter, particle, initializes[i]);\n      }\n    }\n\n    this.bindEmitter(emitter, particle);\n  },\n\n  // init\n  init(emitter, particle, initialize) {\n    Util.setProp(particle, initialize);\n    Util.setVectorVal(particle, initialize);\n  },\n\n  bindEmitter(emitter, particle) {\n    if (emitter.bindEmitter) {\n      particle.p.add(emitter.p);\n      particle.v.add(emitter.v);\n      particle.a.add(emitter.a);\n\n      particle.v.rotate(MathUtil.degreeTransform(emitter.rotation));\n    }\n  }\n};\n","import Util from \"../utils/Util\";\nimport Puid from \"../utils/Puid\";\nimport Particle from \"../core/Particle\";\nimport EventDispatcher from \"../events/EventDispatcher\";\n\nimport Rate from \"../initialize/Rate\";\nimport InitializeUtil from \"../initialize/InitializeUtil\";\n\nexport default class Emitter extends Particle {\n  /**\n   * You can use this emit particles.\n   *\n   * It will dispatch follow events:\n   * PARTICLE_CREATED\n   * PARTICLE_UPDATA\n   * PARTICLE_DEAD\n   *\n   * @class Emitter\n   * @constructor\n   * @param {Object} conf the parameters object;\n   * for example {damping:0.01,bindEmitter:false}\n   */\n  constructor(conf = {}) {\n    super(conf);\n\n    this.particles = [];\n    this.behaviours = [];\n    this.initializes = [];\n\n    this.emitTime = 0;\n    this.emitSpeed = 0;\n    this.totalTime = -1;\n\n    /**\n     * The friction coefficient for all particle emit by This;\n     * @property damping\n     * @type {Number}\n     * @default 0.006\n     */\n    this.damping = 0.006;\n\n    /**\n     * If bindEmitter the particles can bind this emitter's property;\n     * @property bindEmitter\n     * @type {Boolean}\n     * @default true\n     */\n    this.bindEmitter = true;\n\n    /**\n     * The number of particles per second emit (a [particle]/b [s]);\n     * @property rate\n     * @type {Rate}\n     * @default Rate(1, .1)\n     */\n    this.rate = new Rate(1, 0.1);\n\n    this.name = \"Emitter\";\n    this.id = Puid.id(this.name);\n  }\n\n  /**\n   * start emit particle\n   * @method emit\n   * @param {Number} emitTime begin emit time;\n   * @param {String} life the life of this emitter\n   */\n  emit(totalTime, life) {\n    this.stoped = false;\n    this.emitTime = 0;\n    this.totalTime = Util.initValue(totalTime, Infinity);\n\n    if (life === true || life === \"life\" || life === \"destroy\") {\n      this.life = totalTime === \"once\" ? 1 : this.totalTime;\n    } else if (!isNaN(life)) {\n      this.life = life;\n    }\n\n    this.rate.init();\n  }\n\n  /**\n   * stop emiting\n   * @method stop\n   */\n  stop() {\n    this.totalTime = -1;\n    this.emitTime = 0;\n    this.stoped = true;\n  }\n\n  preEmit(time) {\n    let oldStoped = this.stoped;\n    let oldEmitTime = this.emitTime;\n    let oldTotalTime = this.totalTime;\n\n    this.stoped = false;\n    this.emitTime = 0;\n    this.totalTime = time;\n    this.rate.init();\n\n    const step = 0.0167;\n    while (time > step) {\n      time -= step;\n      this.update(step);\n    }\n\n    this.stoped = oldStoped;\n    this.emitTime = oldEmitTime + Math.max(time, 0);\n    this.totalTime = oldTotalTime;\n  }\n\n  /**\n   * remove current all particles\n   * @method removeAllParticles\n   */\n  removeAllParticles() {\n    let i = this.particles.length;\n    while (i--) this.particles[i].dead = true;\n  }\n\n  /**\n   * add initialize to this emitter\n   * @method addSelfInitialize\n   */\n  addSelfInitialize(initialize) {\n    if (initialize[\"init\"]) {\n      initialize.init(this);\n    } else {\n      this.initAll();\n    }\n  }\n\n  /**\n   * add the Initialize to particles;\n   *\n   * you can use initializes array:for example emitter.addInitialize(initialize1,initialize2,initialize3);\n   * @method addInitialize\n   * @param {Initialize} initialize like this new Radius(1, 12)\n   */\n  addInitialize(...rest) {\n    let i = rest.length;\n    while (i--) this.initializes.push(rest[i]);\n  }\n\n  /**\n   * remove the Initialize\n   * @method removeInitialize\n   * @param {Initialize} initialize a initialize\n   */\n  removeInitialize(initializer) {\n    const index = this.initializes.indexOf(initializer);\n    if (index > -1) this.initializes.splice(index, 1);\n  }\n\n  /**\n   * remove all Initializes\n   * @method removeInitializers\n   */\n  removeAllInitializers() {\n    Util.emptyArray(this.initializes);\n  }\n\n  /**\n   * add the Behaviour to particles;\n   *\n   * you can use Behaviours array:emitter.addBehaviour(Behaviour1,Behaviour2,Behaviour3);\n   * @method addBehaviour\n   * @param {Behaviour} behaviour like this new Color('random')\n   */\n  addBehaviour(...rest) {\n    let i = arguments.length;\n    while (i--) {\n      let behaviour = rest[i];\n      this.behaviours.push(behaviour);\n      if (behaviour.parents) behaviour.parents.push(this);\n    }\n  }\n\n  /**\n   * remove the Behaviour\n   * @method removeBehaviour\n   * @param {Behaviour} behaviour a behaviour\n   */\n  removeBehaviour(behaviour) {\n    let index = this.behaviours.indexOf(behaviour);\n    this.behaviours.splice(index, 1);\n\n    if (behaviour.parents) {\n      index = behaviour.parents.indexOf(behaviour);\n      behaviour.parents.splice(index, 1);\n    }\n\n    return index;\n  }\n\n  /**\n   * remove all behaviours\n   * @method removeAllBehaviours\n   */\n  removeAllBehaviours() {\n    Util.emptyArray(this.behaviours);\n  }\n\n  // emitter update\n  update(time) {\n    this.age += time;\n    if (this.age >= this.life || this.dead) this.destroy();\n\n    this.emitting(time);\n    this.integrate(time);\n  }\n\n  integrate(time) {\n    if (!this.parent) return;\n\n    const damping = 1 - this.damping;\n    this.parent.integrator.calculate(this, time, damping);\n\n    const length = this.particles.length;\n    let i, particle;\n\n    for (i = length - 1; i >= 0; i--) {\n      particle = this.particles[i];\n\n      // particle update\n      particle.update(time, i);\n      this.parent.integrator.calculate(particle, time, damping);\n      this.dispatch(\"PARTICLE_UPDATE\", particle);\n\n      // check dead\n      if (particle.dead) {\n        this.dispatch(\"PARTICLE_DEAD\", particle);\n\n        this.parent.pool.expire(particle);\n        this.particles.splice(i, 1);\n      }\n    }\n  }\n\n  dispatch(event, target) {\n    this.parent && this.parent.dispatchEvent(event, target);\n    this.bindEvent && this.dispatchEvent(event, target);\n  }\n\n  emitting(time) {\n    if (this.totalTime === \"once\") {\n      let i;\n      const length = this.rate.getValue(99999);\n\n      if (length > 0) this.emitSpeed = length;\n      for (i = 0; i < length; i++) this.createParticle();\n      this.totalTime = \"none\";\n    } else {\n      this.emitTime += time;\n\n      if (this.emitTime < this.totalTime) {\n        const length = this.rate.getValue(time);\n        let i;\n\n        if (length > 0) this.emitSpeed = length;\n        for (i = 0; i < length; i++) this.createParticle();\n      }\n    }\n  }\n\n  /**\n   * create single particle;\n   *\n   * can use emit({x:10},new Gravity(10),{'particleUpdate',fun}) or emit([{x:10},new Initialize],new Gravity(10),{'particleUpdate',fun})\n   * @method removeAllParticles\n   */\n  createParticle(initialize, behaviour) {\n    const particle = this.parent.pool.get(Particle);\n    this.setupParticle(particle, initialize, behaviour);\n    this.dispatch(\"PARTICLE_CREATED\", particle);\n\n    return particle;\n  }\n\n  setupParticle(particle, initialize, behaviour) {\n    let initializes = this.initializes;\n    let behaviours = this.behaviours;\n\n    if (initialize) initializes = Util.toArray(initialize);\n    if (behaviour) behaviours = Util.toArray(behaviour);\n\n    particle.reset();\n    InitializeUtil.initialize(this, particle, initializes);\n    particle.addBehaviours(behaviours);\n    particle.parent = this;\n\n    this.particles.push(particle);\n  }\n\n  remove() {\n    this.stop();\n    Util.destroyAll(this.particles);\n  }\n\n  /**\n   * Destory this Emitter\n   * @method destroy\n   */\n  destroy() {\n    this.dead = true;\n    this.remove();\n    this.removeAllInitializers();\n    this.removeAllBehaviours();\n    this.parent && this.parent.removeEmitter(this);\n  }\n}\n\nEventDispatcher.bind(Emitter);\n","import Emitter from \"./Emitter\";\n\nexport default class BehaviourEmitter extends Emitter {\n  /**\n   * The BehaviourEmitter class inherits from Proton.Emitter\n   *\n   * use the BehaviourEmitter you can add behaviours to self;\n   * @class Proton.BehaviourEmitter\n   * @constructor\n   * @param {Object} conf the parameters object;\n   */\n  constructor(conf) {\n    super(conf);\n\n    this.selfBehaviours = [];\n  }\n\n  /**\n   * add the Behaviour to emitter;\n   *\n   * you can use Behaviours array:emitter.addSelfBehaviour(Behaviour1,Behaviour2,Behaviour3);\n   * @method addSelfBehaviour\n   * @param {Proton.Behaviour} behaviour like this new Proton.Color('random')\n   */\n  addSelfBehaviour(...rest) {\n    let i,\n      length = rest.length;\n\n    for (i = 0; i < length; i++) {\n      let behaviour = rest[i];\n      this.selfBehaviours.push(behaviour);\n      behaviour.initialize(this);\n    }\n  }\n\n  /**\n   * remove the Behaviour for self\n   * @method removeSelfBehaviour\n   * @param {Proton.Behaviour} behaviour a behaviour\n   */\n  removeSelfBehaviour(behaviour) {\n    const index = this.selfBehaviours.indexOf(behaviour);\n    if (index > -1) this.selfBehaviours.splice(index, 1);\n  }\n\n  update(time) {\n    super.update(time);\n\n    if (!this.sleep) {\n      const length = this.selfBehaviours.length;\n      let i;\n\n      for (i = 0; i < length; i++) {\n        this.selfBehaviours[i].applyBehaviour(this, time, i);\n      }\n    }\n  }\n}\n","import Util from \"../utils/Util\";\nimport Emitter from \"./Emitter\";\n\nexport default class FollowEmitter extends Emitter {\n  /**\n   * The FollowEmitter class inherits from Proton.Emitter\n   *\n   * use the FollowEmitter will emit particle when mousemoving\n   *\n   * @class Proton.FollowEmitter\n   * @constructor\n   * @param {Element} mouseTarget mouseevent's target;\n   * @param {Number} ease the easing of following speed;\n   * @default 0.7\n   * @param {Object} conf the parameters object;\n   */\n  constructor(mouseTarget, ease, conf) {\n    super(conf);\n\n    this.mouseTarget = Util.initValue(mouseTarget, window);\n    this.ease = Util.initValue(ease, 0.7);\n\n    this._allowEmitting = false;\n    this.initEventHandler();\n  }\n\n  initEventHandler() {\n    this.mousemoveHandler = e => this.mousemove.call(this, e);\n    this.mousedownHandler = e => this.mousedown.call(this, e);\n    this.mouseupHandler = e => this.mouseup.call(this, e);\n\n    this.mouseTarget.addEventListener(\n      \"mousemove\",\n      this.mousemoveHandler,\n      false\n    );\n  }\n\n  /**\n   * start emit particle\n   * @method emit\n   */\n  emit() {\n    this._allowEmitting = true;\n  }\n\n  /**\n   * stop emiting\n   * @method stop\n   */\n  stop() {\n    this._allowEmitting = false;\n  }\n\n  mousemove(e) {\n    if (e.layerX || e.layerX === 0) {\n      this.p.x += (e.layerX - this.p.x) * this.ease;\n      this.p.y += (e.layerY - this.p.y) * this.ease;\n    } else if (e.offsetX || e.offsetX === 0) {\n      this.p.x += (e.offsetX - this.p.x) * this.ease;\n      this.p.y += (e.offsetY - this.p.y) * this.ease;\n    }\n\n    if (this._allowEmitting) super.emit(\"once\");\n  }\n\n  /**\n   * Destory this Emitter\n   * @method destroy\n   */\n  destroy() {\n    super.destroy();\n    this.mouseTarget.removeEventListener(\n      \"mousemove\",\n      this.mousemoveHandler,\n      false\n    );\n  }\n}\n","import Pool from \"../core/Pool\";\n\nexport default class BaseRenderer {\n    constructor(element, stroke) {\n        this.pool = new Pool();\n        this.element = element;\n        this.stroke = stroke;\n        this.circleConf = { isCircle: true };\n\n        this.initHandler();\n        this.name = \"BaseRenderer\";\n    }\n\n    setStroke(color = \"#000000\", thinkness = 1) {\n        this.stroke = { color, thinkness };\n    }\n\n    initHandler() {\n        this._protonUpdateHandler = () => {\n            this.onProtonUpdate.call(this);\n        };\n\n        this._protonUpdateAfterHandler = () => {\n            this.onProtonUpdateAfter.call(this);\n        };\n\n        this._emitterAddedHandler = emitter => {\n            this.onEmitterAdded.call(this, emitter);\n        };\n\n        this._emitterRemovedHandler = emitter => {\n            this.onEmitterRemoved.call(this, emitter);\n        };\n\n        this._particleCreatedHandler = particle => {\n            this.onParticleCreated.call(this, particle);\n        };\n\n        this._particleUpdateHandler = particle => {\n            this.onParticleUpdate.call(this, particle);\n        };\n\n        this._particleDeadHandler = particle => {\n            this.onParticleDead.call(this, particle);\n        };\n    }\n\n    init(proton) {\n        this.parent = proton;\n\n        proton.addEventListener(\"PROTON_UPDATE\", this._protonUpdateHandler);\n        proton.addEventListener(\n            \"PROTON_UPDATE_AFTER\",\n            this._protonUpdateAfterHandler\n        );\n\n        proton.addEventListener(\"EMITTER_ADDED\", this._emitterAddedHandler);\n        proton.addEventListener(\"EMITTER_REMOVED\", this._emitterRemovedHandler);\n\n        proton.addEventListener(\n            \"PARTICLE_CREATED\",\n            this._particleCreatedHandler\n        );\n        proton.addEventListener(\"PARTICLE_UPDATE\", this._particleUpdateHandler);\n        proton.addEventListener(\"PARTICLE_DEAD\", this._particleDeadHandler);\n    }\n\n    resize(width, height) {}\n\n    destroy() {\n        this.remove();\n    }\n\n    remove(proton) {\n        this.parent.removeEventListener(\n            \"PROTON_UPDATE\",\n            this._protonUpdateHandler\n        );\n        this.parent.removeEventListener(\n            \"PROTON_UPDATE_AFTER\",\n            this._protonUpdateAfterHandler\n        );\n\n        this.parent.removeEventListener(\n            \"EMITTER_ADDED\",\n            this._emitterAddedHandler\n        );\n        this.parent.removeEventListener(\n            \"EMITTER_REMOVED\",\n            this._emitterRemovedHandler\n        );\n\n        this.parent.removeEventListener(\n            \"PARTICLE_CREATED\",\n            this._particleCreatedHandler\n        );\n        this.parent.removeEventListener(\n            \"PARTICLE_UPDATE\",\n            this._particleUpdateHandler\n        );\n        this.parent.removeEventListener(\n            \"PARTICLE_DEAD\",\n            this._particleDeadHandler\n        );\n\n        this.parent = null;\n    }\n\n    onProtonUpdate() {}\n    onProtonUpdateAfter() {}\n\n    onEmitterAdded(emitter) {}\n    onEmitterRemoved(emitter) {}\n\n    onParticleCreated(particle) {}\n    onParticleUpdate(particle) {}\n    onParticleDead(particle) {}\n}\n","import ImgUtil from \"../utils/ImgUtil\";\nimport ColorUtil from \"../utils/ColorUtil\";\nimport MathUtil from \"../math/MathUtil\";\nimport BaseRenderer from \"./BaseRenderer\";\n\nexport default class CanvasRenderer extends BaseRenderer {\n    constructor(element) {\n        super(element);\n\n        this.stroke = null;\n        this.context = this.element.getContext(\"2d\");\n        this.bufferCache = {};\n        this.name = \"CanvasRenderer\";\n    }\n\n    resize(width, height) {\n        this.element.width = width;\n        this.element.height = height;\n    }\n\n    onProtonUpdate() {\n        this.context.clearRect(0, 0, this.element.width, this.element.height);\n    }\n\n    onParticleCreated(particle) {\n        if (particle.body) {\n            ImgUtil.getImgFromCache(particle.body, this.addImg2Body, particle);\n        } else {\n            particle.color = particle.color || \"#ff0000\";\n        }\n    }\n\n    onParticleUpdate(particle) {\n        if (particle.body) {\n            if (particle.body instanceof Image) this.drawImage(particle);\n        } else {\n            this.drawCircle(particle);\n        }\n    }\n\n    onParticleDead(particle) {\n        particle.body = null;\n    }\n\n    // private\n    addImg2Body(img, particle) {\n        particle.body = img;\n    }\n\n    // private drawCircle\n    drawImage(particle) {\n        const w = (particle.body.width * particle.scale) | 0;\n        const h = (particle.body.height * particle.scale) | 0;\n        const x = particle.p.x - w / 2;\n        const y = particle.p.y - h / 2;\n\n        if (!!particle.color) {\n            if (!particle.data[\"buffer\"])\n                particle.data.buffer = this.createBuffer(particle.body);\n\n            const bufContext = particle.data.buffer.getContext(\"2d\");\n            bufContext.clearRect(\n                0,\n                0,\n                particle.data.buffer.width,\n                particle.data.buffer.height\n            );\n            bufContext.globalAlpha = particle.alpha;\n            bufContext.drawImage(particle.body, 0, 0);\n\n            bufContext.globalCompositeOperation = \"source-atop\";\n            bufContext.fillStyle = ColorUtil.rgbToHex(particle.rgb);\n            bufContext.fillRect(\n                0,\n                0,\n                particle.data.buffer.width,\n                particle.data.buffer.height\n            );\n            bufContext.globalCompositeOperation = \"source-over\";\n            bufContext.globalAlpha = 1;\n\n            this.context.drawImage(\n                particle.data.buffer,\n                0,\n                0,\n                particle.data.buffer.width,\n                particle.data.buffer.height,\n                x,\n                y,\n                w,\n                h\n            );\n        } else {\n            this.context.save();\n\n            this.context.globalAlpha = particle.alpha;\n            this.context.translate(particle.p.x, particle.p.y);\n            this.context.rotate(MathUtil.degreeTransform(particle.rotation));\n            this.context.translate(-particle.p.x, -particle.p.y);\n            this.context.drawImage(\n                particle.body,\n                0,\n                0,\n                particle.body.width,\n                particle.body.height,\n                x,\n                y,\n                w,\n                h\n            );\n\n            this.context.globalAlpha = 1;\n            this.context.restore();\n        }\n    }\n\n    // private drawCircle --\n    drawCircle(particle) {\n        if (particle.rgb) {\n            this.context.fillStyle = `rgba(${particle.rgb.r},${particle.rgb.g},${particle.rgb.b},${particle.alpha})`;\n        } else {\n            this.context.fillStyle = particle.color;\n        }\n\n        // draw circle\n        this.context.beginPath();\n        this.context.arc(\n            particle.p.x,\n            particle.p.y,\n            particle.radius,\n            0,\n            Math.PI * 2,\n            true\n        );\n\n        if (this.stroke) {\n            this.context.strokeStyle = this.stroke.color;\n            this.context.lineWidth = this.stroke.thinkness;\n            this.context.stroke();\n        }\n\n        this.context.closePath();\n        this.context.fill();\n    }\n\n    // private createBuffer\n    createBuffer(image) {\n        if (image instanceof Image) {\n            const size = image.width + \"_\" + image.height;\n            let canvas = this.bufferCache[size];\n\n            if (!canvas) {\n                canvas = document.createElement(\"canvas\");\n                canvas.width = image.width;\n                canvas.height = image.height;\n                this.bufferCache[size] = canvas;\n            }\n\n            return canvas;\n        }\n    }\n}\n","import DomUtil from \"../utils/DomUtil\";\nimport ImgUtil from \"../utils/ImgUtil\";\nimport BaseRenderer from \"./BaseRenderer\";\n\nexport default class DomRenderer extends BaseRenderer {\n  constructor(element) {\n    super(element);\n\n    this.stroke = null;\n    this.pool.create = (body, particle) => this.createBody(body, particle);\n    this.addImg2Body = this.addImg2Body.bind(this);\n\n    this.transform3d = false;\n    this.name = \"DomRenderer\";\n  }\n\n  onParticleCreated(particle) {\n    if (particle.body) {\n      ImgUtil.getImgFromCache(particle.body, this.addImg2Body, particle);\n    } else {\n      particle.body = this.pool.get(this.circleConf, particle);\n      this.element.appendChild(particle.body);\n    }\n  }\n\n  onParticleUpdate(particle) {\n    if (this.bodyReady(particle)) {\n      if (this.transform3d)\n        DomUtil.transform3d(\n          particle.body,\n          particle.p.x,\n          particle.p.y,\n          particle.scale,\n          particle.rotation\n        );\n      else\n        DomUtil.transform(\n          particle.body,\n          particle.p.x,\n          particle.p.y,\n          particle.scale,\n          particle.rotation\n        );\n\n      particle.body.style.opacity = particle.alpha;\n      if (particle.body.isCircle) {\n        particle.body.style.backgroundColor = particle.color || \"#ff0000\";\n      }\n    }\n  }\n\n  onParticleDead(particle) {\n    if (this.bodyReady(particle)) {\n      this.element.removeChild(particle.body);\n      this.pool.expire(particle.body);\n      particle.body = null;\n    }\n  }\n\n  bodyReady(particle) {\n    return (\n      typeof particle.body === \"object\" &&\n      particle.body &&\n      !particle.body.isInner\n    );\n  }\n\n  // private\n  addImg2Body(img, particle) {\n    if (particle.dead) return;\n    particle.body = this.pool.get(img, particle);\n    DomUtil.resize(particle.body, img.width, img.height);\n\n    this.element.appendChild(particle.body);\n  }\n\n  createBody(body, particle) {\n    if (body.isCircle) return this.createCircle(particle);\n    else return this.createSprite(body, particle);\n  }\n\n  // private --\n  createCircle(particle) {\n    const dom = DomUtil.createDiv(\n      `${particle.id}_dom`,\n      2 * particle.radius,\n      2 * particle.radius\n    );\n    dom.style.borderRadius = `${particle.radius}px`;\n\n    if (this.stroke) {\n      dom.style.borderColor = this.stroke.color;\n      dom.style.borderWidth = `${this.stroke.thinkness}px`;\n    }\n    dom.isCircle = true;\n\n    return dom;\n  }\n\n  createSprite(body, particle) {\n    const url = typeof body === \"string\" ? body : body.src;\n    const dom = DomUtil.createDiv(\n      `${particle.id}_dom`,\n      body.width,\n      body.height\n    );\n    dom.style.backgroundImage = `url(${url})`;\n\n    return dom;\n  }\n}\n","import BaseRenderer from \"./BaseRenderer\";\n\nexport default class EaselRenderer extends BaseRenderer {\n  constructor(element, stroke) {\n    super(element);\n\n    this.stroke = stroke;\n    this.name = \"EaselRenderer\";\n  }\n\n  onParticleCreated(particle) {\n    if (particle.body) {\n      this.createSprite(particle);\n    } else {\n      this.createCircle(particle);\n    }\n\n    this.element.addChild(particle.body);\n  }\n\n  onParticleUpdate(particle) {\n    if (particle.body) {\n      particle.body.x = particle.p.x;\n      particle.body.y = particle.p.y;\n\n      particle.body.alpha = particle.alpha;\n      particle.body.scaleX = particle.body.scaleY = particle.scale;\n      particle.body.rotation = particle.rotation;\n    }\n  }\n\n  onParticleDead(particle) {\n    if (particle.body) {\n      particle.body.parent && particle.body.parent.removeChild(particle.body);\n      this.pool.expire(particle.body);\n      particle.body = null;\n    }\n\n    if (particle.graphics) this.pool.expire(particle.graphics);\n  }\n\n  // private\n  createSprite(particle) {\n    particle.body = this.pool.get(particle.body);\n\n    if (particle.body.parent) return;\n    if (particle.body[\"image\"]) {\n      particle.body.regX = particle.body.image.width / 2;\n      particle.body.regY = particle.body.image.height / 2;\n    }\n  }\n\n  createCircle(particle) {\n    const graphics = this.pool.get(createjs.Graphics);\n\n    if (this.stroke) {\n      if (this.stroke instanceof String) graphics.beginStroke(this.stroke);\n      else graphics.beginStroke(\"#000000\");\n    }\n    graphics\n      .beginFill(particle.color || \"#ff0000\")\n      .drawCircle(0, 0, particle.radius);\n\n    const shape = this.pool.get(createjs.Shape, [graphics]);\n\n    particle.body = shape;\n    particle.graphics = graphics;\n  }\n}\n","import Rectangle from \"../math/Rectangle\";\nimport BaseRenderer from \"./BaseRenderer\";\n\nexport default class PixelRenderer extends BaseRenderer {\n  constructor(element, rectangle) {\n    super(element);\n\n    this.context = this.element.getContext(\"2d\");\n    this.imageData = null;\n    this.rectangle = null;\n    this.rectangle = rectangle;\n    this.createImageData(rectangle);\n\n    this.name = \"PixelRenderer\";\n  }\n\n  resize(width, height) {\n    this.element.width = width;\n    this.element.height = height;\n  }\n\n  createImageData(rectangle) {\n    this.rectangle = rectangle\n      ? rectangle\n      : new Rectangle(0, 0, this.element.width, this.element.height);\n    this.imageData = this.context.createImageData(\n      this.rectangle.width,\n      this.rectangle.height\n    );\n    this.context.putImageData(\n      this.imageData,\n      this.rectangle.x,\n      this.rectangle.y\n    );\n  }\n\n  onProtonUpdate() {\n    this.context.clearRect(\n      this.rectangle.x,\n      this.rectangle.y,\n      this.rectangle.width,\n      this.rectangle.height\n    );\n    this.imageData = this.context.getImageData(\n      this.rectangle.x,\n      this.rectangle.y,\n      this.rectangle.width,\n      this.rectangle.height\n    );\n  }\n\n  onProtonUpdateAfter() {\n    this.context.putImageData(\n      this.imageData,\n      this.rectangle.x,\n      this.rectangle.y\n    );\n  }\n\n  onParticleCreated(particle) {}\n\n  onParticleUpdate(particle) {\n    if (this.imageData) {\n      this.setPixel(\n        this.imageData,\n        Math.floor(particle.p.x - this.rectangle.x),\n        Math.floor(particle.p.y - this.rectangle.y),\n        particle\n      );\n    }\n  }\n\n  setPixel(imagedata, x, y, particle) {\n    const rgb = particle.rgb;\n    if (x < 0 || x > this.element.width || y < 0 || y > this.elementwidth)\n      return;\n\n    const i = ((y >> 0) * imagedata.width + (x >> 0)) * 4;\n\n    imagedata.data[i] = rgb.r;\n    imagedata.data[i + 1] = rgb.g;\n    imagedata.data[i + 2] = rgb.b;\n    imagedata.data[i + 3] = particle.alpha * 255;\n  }\n\n  onParticleDead(particle) {}\n}\n","import ColorUtil from \"../utils/ColorUtil\";\nimport MathUtil from \"../math/MathUtil\";\nimport BaseRenderer from \"./BaseRenderer\";\n\nlet PIXIClass;\nexport default class PixiRenderer extends BaseRenderer {\n  constructor(element, stroke) {\n    super(element);\n\n    this.stroke = stroke;\n    this.color = false;\n    this.setColor = false;\n    this.blendMode = null;\n    this.pool.create = (body, particle) => this.createBody(body, particle);\n    this.setPIXI(window.PIXI);\n\n    this.name = \"PixiRenderer\";\n  }\n\n  setPIXI(PIXI) {\n    try {\n      PIXIClass = PIXI || { Sprite: {} };\n      this.createFromImage =\n        PIXIClass.Sprite.from || PIXIClass.Sprite.fromImage;\n    } catch (e) {}\n  }\n\n  onProtonUpdate() {}\n\n  /**\n   * @param particle\n   */\n  onParticleCreated(particle) {\n    if (particle.body) {\n      particle.body = this.pool.get(particle.body, particle);\n    } else {\n      particle.body = this.pool.get(this.circleConf, particle);\n    }\n\n    if (this.blendMode) {\n      particle.body.blendMode = this.blendMode;\n    }\n\n    this.element.addChild(particle.body);\n  }\n\n  /**\n   * @param particle\n   */\n  onParticleUpdate(particle) {\n    this.transform(particle, particle.body);\n\n    if (this.setColor === true || this.color === true) {\n      particle.body.tint = ColorUtil.getHex16FromParticle(particle);\n    }\n  }\n\n  /**\n   * @param particle\n   */\n  onParticleDead(particle) {\n    this.element.removeChild(particle.body);\n    this.pool.expire(particle.body);\n    particle.body = null;\n  }\n\n  destroy(particles) {\n    super.destroy();\n    this.pool.destroy();\n\n    let i = particles.length;\n    while (i--) {\n      let particle = particles[i];\n      if (particle.body) {\n        this.element.removeChild(particle.body);\n      }\n    }\n  }\n\n  transform(particle, target) {\n    target.x = particle.p.x;\n    target.y = particle.p.y;\n\n    target.alpha = particle.alpha;\n\n    target.scale.x = particle.scale;\n    target.scale.y = particle.scale;\n\n    // using cached version of MathUtil.PI_180 for slight performance increase.\n    target.rotation = particle.rotation * MathUtil.PI_180; // MathUtil.PI_180;\n  }\n\n  createBody(body, particle) {\n    if (body.isCircle) return this.createCircle(particle);\n    else return this.createSprite(body);\n  }\n\n  createSprite(body) {\n    const sprite = body.isInner\n      ? this.createFromImage(body.src)\n      : new PIXIClass.Sprite(body);\n\n    sprite.anchor.x = 0.5;\n    sprite.anchor.y = 0.5;\n\n    return sprite;\n  }\n\n  createCircle(particle) {\n    const graphics = new PIXIClass.Graphics();\n\n    if (this.stroke) {\n      const stroke = this.stroke instanceof String ? this.stroke : 0x000000;\n      graphics.beginStroke(stroke);\n    }\n\n    graphics.beginFill(particle.color || 0x008ced);\n    graphics.drawCircle(0, 0, particle.radius);\n    graphics.endFill();\n\n    return graphics;\n  }\n}\n","import Mat3 from \"../math/Mat3\";\n\nexport default class MStack {\n  constructor() {\n    this.mats = [];\n    this.size = 0;\n\n    for (let i = 0; i < 20; i++)\n      this.mats.push(Mat3.create([0, 0, 0, 0, 0, 0, 0, 0, 0]));\n  }\n\n  set(m, i) {\n    if (i === 0) Mat3.set(m, this.mats[0]);\n    else Mat3.multiply(this.mats[i - 1], m, this.mats[i]);\n\n    this.size = Math.max(this.size, i + 1);\n  }\n\n  push(m) {\n    if (this.size === 0) Mat3.set(m, this.mats[0]);\n    else Mat3.multiply(this.mats[this.size - 1], m, this.mats[this.size]);\n\n    this.size++;\n  }\n\n  pop() {\n    if (this.size > 0) this.size--;\n  }\n\n  top() {\n    return this.mats[this.size - 1];\n  }\n}\n","import Mat3 from '../math/Mat3';\nimport BaseRenderer from './BaseRenderer';\n\nimport Util from '../utils/Util';\nimport ImgUtil from '../utils/ImgUtil';\nimport MStack from '../utils/MStack';\nimport DomUtil from '../utils/DomUtil';\nimport WebGLUtil from '../utils/WebGLUtil';\nimport MathUtil from '../math/MathUtil';\n\nexport default class WebGLRenderer extends BaseRenderer {\n\n    constructor(element) {\n        super(element);\n\n        this.gl = this.element.getContext('experimental-webgl', { antialias: true, stencil: false, depth: false });\n        if (!this.gl) alert('Sorry your browser do not suppest WebGL!');\n\n        this.initVar();\n        this.setMaxRadius();\n        this.initShaders();\n        this.initBuffers();\n\n        this.gl.blendEquation(this.gl.FUNC_ADD);\n        this.gl.blendFunc(this.gl.SRC_ALPHA, this.gl.ONE_MINUS_SRC_ALPHA);\n        this.gl.enable(this.gl.BLEND);\n\n        this.addImg2Body = this.addImg2Body.bind(this);\n\n        this.name = 'WebGLRenderer';\n    }\n\n    init(proton) {\n        super.init(proton);\n        this.resize(this.element.width, this.element.height);\n    }\n\n    resize(width, height) {\n        this.umat[4] = -2;\n        this.umat[7] = 1;\n\n        this.smat[0] = 1 / width;\n        this.smat[4] = 1 / height;\n\n        this.mstack.set(this.umat, 0);\n        this.mstack.set(this.smat, 1);\n\n        this.gl.viewport(0, 0, width, height);\n        this.element.width = width;\n        this.element.height = height;\n    }\n\n    setMaxRadius(radius) {\n        this.circleCanvasURL = this.createCircle(radius);\n    }\n\n    getVertexShader() {\n        const vsSource = ['uniform vec2 viewport;', 'attribute vec2 aVertexPosition;', 'attribute vec2 aTextureCoord;', 'uniform mat3 tMat;', 'varying vec2 vTextureCoord;', 'varying float alpha;', 'void main() {', 'vec3 v = tMat * vec3(aVertexPosition, 1.0);', 'gl_Position = vec4(v.x, v.y, 0, 1);', 'vTextureCoord = aTextureCoord;', 'alpha = tMat[0][2];', '}'].join('\\n');\n        return vsSource;\n    }\n\n    getFragmentShader() {\n        const fsSource = ['precision mediump float;', 'varying vec2 vTextureCoord;', 'varying float alpha;', 'uniform sampler2D uSampler;', 'uniform vec4 color;', 'uniform bool useTexture;', 'uniform vec3 uColor;', 'void main() {', 'vec4 textureColor = texture2D(uSampler, vTextureCoord);', 'gl_FragColor = textureColor * vec4(uColor, 1.0);', 'gl_FragColor.w *= alpha;', '}'].join('\\n');\n        return fsSource;\n    }\n\n    initVar() {\n        this.mstack = new MStack();\n        this.umat = Mat3.create([2, 0, 1, 0, -2, 0, -1, 1, 1]);\n        this.smat = Mat3.create([1 / 100, 0, 1, 0, 1 / 100, 0, 0, 0, 1]);\n        this.texturebuffers = {};\n    }\n\n    blendEquation(A) {\n        this.gl.blendEquation(this.gl[A]);\n    }\n\n    blendFunc(A, B) {\n        this.gl.blendFunc(this.gl[A], this.gl[B]);\n    }\n\n    getShader(gl, str, fs) {\n        const shader = fs ? gl.createShader(gl.FRAGMENT_SHADER) : gl.createShader(gl.VERTEX_SHADER);\n\n        gl.shaderSource(shader, str);\n        gl.compileShader(shader);\n\n        if (!gl.getShaderParameter(shader, gl.COMPILE_STATUS)) {\n            alert(gl.getShaderInfoLog(shader));\n            return null;\n        }\n\n        return shader;\n    }\n\n    initShaders() {\n        const fragmentShader = this.getShader(this.gl, this.getFragmentShader(), true);\n        const vertexShader = this.getShader(this.gl, this.getVertexShader(), false);\n\n        this.sprogram = this.gl.createProgram();\n        this.gl.attachShader(this.sprogram, vertexShader);\n        this.gl.attachShader(this.sprogram, fragmentShader);\n        this.gl.linkProgram(this.sprogram);\n\n        if (!this.gl.getProgramParameter(this.sprogram, this.gl.LINK_STATUS))\n            alert('Could not initialise shaders');\n\n        this.gl.useProgram(this.sprogram);\n        this.sprogram.vpa = this.gl.getAttribLocation(this.sprogram, 'aVertexPosition');\n        this.sprogram.tca = this.gl.getAttribLocation(this.sprogram, 'aTextureCoord');\n        this.gl.enableVertexAttribArray(this.sprogram.tca);\n        this.gl.enableVertexAttribArray(this.sprogram.vpa);\n\n        this.sprogram.tMatUniform = this.gl.getUniformLocation(this.sprogram, 'tMat');\n        this.sprogram.samplerUniform = this.gl.getUniformLocation(this.sprogram, 'uSampler');\n        this.sprogram.useTex = this.gl.getUniformLocation(this.sprogram, 'useTexture');\n        this.sprogram.color = this.gl.getUniformLocation(this.sprogram, 'uColor');\n        this.gl.uniform1i(this.sprogram.useTex, 1);\n    };\n\n    initBuffers() {\n        const vs = [0, 3, 1, 0, 2, 3];\n        let idx;\n\n        this.unitIBuffer = this.gl.createBuffer();\n        this.gl.bindBuffer(this.gl.ELEMENT_ARRAY_BUFFER, this.unitIBuffer);\n        this.gl.bufferData(this.gl.ELEMENT_ARRAY_BUFFER, new Uint16Array(vs), this.gl.STATIC_DRAW);\n\n        let i;\n        let ids = [];\n        for (i = 0; i < 100; i++) ids.push(i);\n        idx = new Uint16Array(ids);\n\n        this.unitI33 = this.gl.createBuffer();\n        this.gl.bindBuffer(this.gl.ELEMENT_ARRAY_BUFFER, this.unitI33);\n        this.gl.bufferData(this.gl.ELEMENT_ARRAY_BUFFER, idx, this.gl.STATIC_DRAW);\n\n        ids = [];\n        for (i = 0; i < 100; i++) ids.push(i, i + 1, i + 2);\n        idx = new Uint16Array(ids);\n\n        this.stripBuffer = this.gl.createBuffer();\n        this.gl.bindBuffer(this.gl.ELEMENT_ARRAY_BUFFER, this.stripBuffer);\n        this.gl.bufferData(this.gl.ELEMENT_ARRAY_BUFFER, idx, this.gl.STATIC_DRAW);\n    };\n\n    createCircle(raidus) {\n        this.circleCanvasRadius = WebGLUtil.nhpot(Util.initValue(raidus, 32));\n        const canvas = DomUtil.createCanvas('circle_canvas', this.circleCanvasRadius * 2, this.circleCanvasRadius * 2);\n        const context = canvas.getContext('2d');\n\n        context.beginPath();\n        context.arc(this.circleCanvasRadius, this.circleCanvasRadius, this.circleCanvasRadius, 0, Math.PI * 2, true);\n        context.closePath();\n        context.fillStyle = '#FFF';\n        context.fill();\n\n        return canvas.toDataURL();\n    };\n\n    drawImg2Canvas(particle) {\n        const _w = particle.body.width;\n        const _h = particle.body.height;\n\n        const _width = WebGLUtil.nhpot(particle.body.width);\n        const _height = WebGLUtil.nhpot(particle.body.height);\n\n        const _scaleX = particle.body.width / _width;\n        const _scaleY = particle.body.height / _height;\n\n        if (!this.texturebuffers[particle.data.src])\n            this.texturebuffers[particle.data.src] = [this.gl.createTexture(), this.gl.createBuffer(), this.gl.createBuffer()];\n\n        particle.data.texture = this.texturebuffers[particle.data.src][0];\n        particle.data.vcBuffer = this.texturebuffers[particle.data.src][1];\n        particle.data.tcBuffer = this.texturebuffers[particle.data.src][2];\n\n        this.gl.bindBuffer(this.gl.ARRAY_BUFFER, particle.data.tcBuffer);\n        this.gl.bufferData(this.gl.ARRAY_BUFFER, new Float32Array([0.0, 0.0, _scaleX, 0.0, 0.0, _scaleY, _scaleY, _scaleY]), this.gl.STATIC_DRAW);\n        this.gl.bindBuffer(this.gl.ARRAY_BUFFER, particle.data.vcBuffer);\n        this.gl.bufferData(this.gl.ARRAY_BUFFER, new Float32Array([0.0, 0.0, _w, 0.0, 0.0, _h, _w, _h]), this.gl.STATIC_DRAW);\n\n        const context = particle.data.canvas.getContext('2d');\n        const data = context.getImageData(0, 0, _width, _height);\n\n        this.gl.bindTexture(this.gl.TEXTURE_2D, particle.data.texture);\n        this.gl.texImage2D(this.gl.TEXTURE_2D, 0, this.gl.RGBA, this.gl.RGBA, this.gl.UNSIGNED_BYTE, data);\n        this.gl.texParameteri(this.gl.TEXTURE_2D, this.gl.TEXTURE_MAG_FILTER, this.gl.LINEAR);\n        this.gl.texParameteri(this.gl.TEXTURE_2D, this.gl.TEXTURE_MIN_FILTER, this.gl.LINEAR_MIPMAP_NEAREST);\n        this.gl.generateMipmap(this.gl.TEXTURE_2D);\n\n        particle.data.textureLoaded = true;\n        particle.data.textureWidth = _w;\n        particle.data.textureHeight = _h;\n    }\n\n    onProtonUpdate() {\n        // this.gl.clearColor(0, 0, 0, 1);\n        // this.gl.clear(this.gl.COLOR_BUFFER_BIT | this.gl.DEPTH_BUFFER_BIT);\n    }\n\n    onParticleCreated(particle) {\n        particle.data.textureLoaded = false;\n        particle.data.tmat = Mat3.create();\n        particle.data.tmat[8] = 1;\n        particle.data.imat = Mat3.create();\n        particle.data.imat[8] = 1;\n\n        if (particle.body) {\n            ImgUtil.getImgFromCache(particle.body, this.addImg2Body, particle);\n        } else {\n            ImgUtil.getImgFromCache(this.circleCanvasURL, this.addImg2Body, particle);\n            particle.data.oldScale = particle.radius / this.circleCanvasRadius;\n        }\n    }\n\n    // private\n    addImg2Body(img, particle) {\n        if (particle.dead) return;\n        particle.body = img;\n        particle.data.src = img.src;\n        particle.data.canvas = ImgUtil.getCanvasFromCache(img);\n        particle.data.oldScale = 1;\n\n        this.drawImg2Canvas(particle);\n    }\n\n    onParticleUpdate(particle) {\n        if (particle.data.textureLoaded) {\n            this.updateMatrix(particle);\n\n            this.gl.uniform3f(this.sprogram.color, particle.rgb.r / 255, particle.rgb.g / 255, particle.rgb.b / 255);\n            this.gl.uniformMatrix3fv(this.sprogram.tMatUniform, false, this.mstack.top());\n\n            this.gl.bindBuffer(this.gl.ARRAY_BUFFER, particle.data.vcBuffer);\n            this.gl.vertexAttribPointer(this.sprogram.vpa, 2, this.gl.FLOAT, false, 0, 0);\n            this.gl.bindBuffer(this.gl.ARRAY_BUFFER, particle.data.tcBuffer);\n            this.gl.vertexAttribPointer(this.sprogram.tca, 2, this.gl.FLOAT, false, 0, 0);\n            this.gl.bindTexture(this.gl.TEXTURE_2D, particle.data.texture);\n            this.gl.uniform1i(this.sprogram.samplerUniform, 0);\n            this.gl.bindBuffer(this.gl.ELEMENT_ARRAY_BUFFER, this.unitIBuffer);\n\n            this.gl.drawElements(this.gl.TRIANGLES, 6, this.gl.UNSIGNED_SHORT, 0);\n\n            this.mstack.pop();\n        }\n    }\n\n    onParticleDead(particle) { }\n\n    updateMatrix(particle) {\n        const moveOriginMatrix = WebGLUtil.makeTranslation(-particle.data.textureWidth / 2, -particle.data.textureHeight / 2);\n        const translationMatrix = WebGLUtil.makeTranslation(particle.p.x, particle.p.y);\n\n        const angel = particle.rotation * (MathUtil.PI_180);\n        const rotationMatrix = WebGLUtil.makeRotation(angel);\n\n        const scale = particle.scale * particle.data.oldScale;\n        const scaleMatrix = WebGLUtil.makeScale(scale, scale);\n        let matrix = WebGLUtil.matrixMultiply(moveOriginMatrix, scaleMatrix);\n\n        matrix = WebGLUtil.matrixMultiply(matrix, rotationMatrix);\n        matrix = WebGLUtil.matrixMultiply(matrix, translationMatrix);\n\n        Mat3.inverse(matrix, particle.data.imat);\n        matrix[2] = particle.alpha;\n\n        this.mstack.push(matrix);\n    }\n}","import BaseRenderer from \"./BaseRenderer\";\n\nexport default class CustomRenderer extends BaseRenderer {\n  constructor(element) {\n    super(element);\n\n    this.name = \"CustomRenderer\";\n  }\n}\n","import Zone from \"./Zone\";\nimport Util from \"../utils/Util\";\nimport MathUtil from \"../math/MathUtil\";\n\nexport default class LineZone extends Zone {\n  constructor(x1, y1, x2, y2, direction) {\n    super();\n\n    if (x2 - x1 >= 0) {\n      this.x1 = x1;\n      this.y1 = y1;\n      this.x2 = x2;\n      this.y2 = y2;\n    } else {\n      this.x1 = x2;\n      this.y1 = y2;\n      this.x2 = x1;\n      this.y2 = y1;\n    }\n\n    this.dx = this.x2 - this.x1;\n    this.dy = this.y2 - this.y1;\n\n    this.minx = Math.min(this.x1, this.x2);\n    this.miny = Math.min(this.y1, this.y2);\n    this.maxx = Math.max(this.x1, this.x2);\n    this.maxy = Math.max(this.y1, this.y2);\n\n    this.dot = this.x2 * this.y1 - this.x1 * this.y2;\n    this.xxyy = this.dx * this.dx + this.dy * this.dy;\n\n    this.gradient = this.getGradient();\n    this.length = this.getLength();\n    this.direction = Util.initValue(direction, \">\");\n  }\n\n  getPosition() {\n    this.random = Math.random();\n\n    this.vector.x =\n      this.x1 + this.random * this.length * Math.cos(this.gradient);\n    this.vector.y =\n      this.y1 + this.random * this.length * Math.sin(this.gradient);\n\n    return this.vector;\n  }\n\n  getDirection(x, y) {\n    const A = this.dy;\n    const B = -this.dx;\n    const C = this.dot;\n    const D = B === 0 ? 1 : B;\n\n    if ((A * x + B * y + C) * D > 0) return true;\n    else return false;\n  }\n\n  getDistance(x, y) {\n    const A = this.dy;\n    const B = -this.dx;\n    const C = this.dot;\n    const D = A * x + B * y + C;\n\n    return D / Math.sqrt(this.xxyy);\n  }\n\n  getSymmetric(v) {\n    const tha2 = v.getGradient();\n    const tha1 = this.getGradient();\n    const tha = 2 * (tha1 - tha2);\n\n    const oldx = v.x;\n    const oldy = v.y;\n\n    v.x = oldx * Math.cos(tha) - oldy * Math.sin(tha);\n    v.y = oldx * Math.sin(tha) + oldy * Math.cos(tha);\n\n    return v;\n  }\n\n  getGradient() {\n    return Math.atan2(this.dy, this.dx);\n  }\n\n  rangeOut(particle) {\n    const angle = Math.abs(this.getGradient());\n\n    if (angle <= MathUtil.PI / 4) {\n      if (particle.p.x <= this.maxx && particle.p.x >= this.minx) return true;\n    } else {\n      if (particle.p.y <= this.maxy && particle.p.y >= this.miny) return true;\n    }\n\n    return false;\n  }\n\n  getLength() {\n    return Math.sqrt(this.dx * this.dx + this.dy * this.dy);\n  }\n\n  crossing(particle) {\n    if (this.crossType === \"dead\") {\n      if (\n        this.direction === \">\" ||\n        this.direction === \"R\" ||\n        this.direction === \"right\" ||\n        this.direction === \"down\"\n      ) {\n        if (!this.rangeOut(particle)) return;\n        if (this.getDirection(particle.p.x, particle.p.y)) particle.dead = true;\n      } else {\n        if (!this.rangeOut(particle)) return;\n        if (!this.getDirection(particle.p.x, particle.p.y))\n          particle.dead = true;\n      }\n    } else if (this.crossType === \"bound\") {\n      if (!this.rangeOut(particle)) return;\n\n      if (this.getDistance(particle.p.x, particle.p.y) <= particle.radius) {\n        if (this.dx === 0) {\n          particle.v.x *= -1;\n        } else if (this.dy === 0) {\n          particle.v.y *= -1;\n        } else {\n          this.getSymmetric(particle.v);\n        }\n      }\n    } else if (this.crossType === \"cross\") {\n      if (this.alert) {\n        console.error(\"Sorry, LineZone does not support cross method!\");\n        this.alert = false;\n      }\n    }\n  }\n}\n","import Zone from \"./Zone\";\nimport MathUtil from \"../math/MathUtil\";\n\nexport default class CircleZone extends Zone {\n  constructor(x, y, radius) {\n    super();\n\n    this.x = x;\n    this.y = y;\n    this.radius = radius;\n\n    this.angle = 0;\n    this.center = { x, y };\n  }\n\n  getPosition() {\n    this.angle = MathUtil.PIx2 * Math.random();\n    this.randomRadius = Math.random() * this.radius;\n\n    this.vector.x = this.x + this.randomRadius * Math.cos(this.angle);\n    this.vector.y = this.y + this.randomRadius * Math.sin(this.angle);\n\n    return this.vector;\n  }\n\n  setCenter(x, y) {\n    this.center.x = x;\n    this.center.y = y;\n  }\n\n  crossing(particle) {\n    const d = particle.p.distanceTo(this.center);\n\n    if (this.crossType === \"dead\") {\n      if (d - particle.radius > this.radius) particle.dead = true;\n    } else if (this.crossType === \"bound\") {\n      if (d + particle.radius >= this.radius) this.getSymmetric(particle);\n    } else if (this.crossType === \"cross\") {\n      if (this.alert) {\n        console.error(\"Sorry, CircleZone does not support cross method!\");\n        this.alert = false;\n      }\n    }\n  }\n\n  getSymmetric(particle) {\n    let tha2 = particle.v.getGradient();\n    let tha1 = this.getGradient(particle);\n\n    let tha = 2 * (tha1 - tha2);\n    let oldx = particle.v.x;\n    let oldy = particle.v.y;\n\n    particle.v.x = oldx * Math.cos(tha) - oldy * Math.sin(tha);\n    particle.v.y = oldx * Math.sin(tha) + oldy * Math.cos(tha);\n  }\n\n  getGradient(particle) {\n    return (\n      -MathUtil.PI_2 +\n      Math.atan2(particle.p.y - this.center.y, particle.p.x - this.center.x)\n    );\n  }\n}\n","import Zone from \"./Zone\";\n\nexport default class RectZone extends Zone {\n  constructor(x, y, width, height) {\n    super();\n\n    this.x = x;\n    this.y = y;\n    this.width = width;\n    this.height = height;\n  }\n\n  getPosition() {\n    this.vector.x = this.x + Math.random() * this.width;\n    this.vector.y = this.y + Math.random() * this.height;\n\n    return this.vector;\n  }\n\n  crossing(particle) {\n    // particle dead zone\n    if (this.crossType === \"dead\") {\n      if (particle.p.x + particle.radius < this.x) particle.dead = true;\n      else if (particle.p.x - particle.radius > this.x + this.width)\n        particle.dead = true;\n\n      if (particle.p.y + particle.radius < this.y) particle.dead = true;\n      else if (particle.p.y - particle.radius > this.y + this.height)\n        particle.dead = true;\n    }\n\n    // particle bound zone\n    else if (this.crossType === \"bound\") {\n      if (particle.p.x - particle.radius < this.x) {\n        particle.p.x = this.x + particle.radius;\n        particle.v.x *= -1;\n      } else if (particle.p.x + particle.radius > this.x + this.width) {\n        particle.p.x = this.x + this.width - particle.radius;\n        particle.v.x *= -1;\n      }\n\n      if (particle.p.y - particle.radius < this.y) {\n        particle.p.y = this.y + particle.radius;\n        particle.v.y *= -1;\n      } else if (particle.p.y + particle.radius > this.y + this.height) {\n        particle.p.y = this.y + this.height - particle.radius;\n        particle.v.y *= -1;\n      }\n    }\n\n    // particle cross zone\n    else if (this.crossType === \"cross\") {\n      if (particle.p.x + particle.radius < this.x && particle.v.x <= 0)\n        particle.p.x = this.x + this.width + particle.radius;\n      else if (\n        particle.p.x - particle.radius > this.x + this.width &&\n        particle.v.x >= 0\n      )\n        particle.p.x = this.x - particle.radius;\n\n      if (particle.p.y + particle.radius < this.y && particle.v.y <= 0)\n        particle.p.y = this.y + this.height + particle.radius;\n      else if (\n        particle.p.y - particle.radius > this.y + this.height &&\n        particle.v.y >= 0\n      )\n        particle.p.y = this.y - particle.radius;\n    }\n  }\n}\n","import Zone from \"./Zone\";\nimport Util from \"../utils/Util\";\n\nexport default class ImageZone extends Zone {\n  constructor(imageData, x, y, d) {\n    super();\n\n    this.reset(imageData, x, y, d);\n  }\n\n  reset(imageData, x, y, d) {\n    this.imageData = imageData;\n    this.x = Util.initValue(x, 0);\n    this.y = Util.initValue(y, 0);\n    this.d = Util.initValue(d, 2);\n\n    this.vectors = [];\n    this.setVectors();\n  }\n\n  setVectors() {\n    let i, j;\n    const length1 = this.imageData.width;\n    const length2 = this.imageData.height;\n\n    for (i = 0; i < length1; i += this.d) {\n      for (j = 0; j < length2; j += this.d) {\n        let index = ((j >> 0) * length1 + (i >> 0)) * 4;\n\n        if (this.imageData.data[index + 3] > 0) {\n          this.vectors.push({ x: i + this.x, y: j + this.y });\n        }\n      }\n    }\n\n    return this.vector;\n  }\n\n  getBound(x, y) {\n    var index = ((y >> 0) * this.imageData.width + (x >> 0)) * 4;\n    if (this.imageData.data[index + 3] > 0) return true;\n    else return false;\n  }\n\n  getPosition() {\n    const vector = Util.getRandFromArray(this.vectors);\n    return this.vector.copy(vector);\n  }\n\n  getColor(x, y) {\n    x -= this.x;\n    y -= this.y;\n    var i = ((y >> 0) * this.imageData.width + (x >> 0)) * 4;\n\n    return {\n      r: this.imageData.data[i],\n      g: this.imageData.data[i + 1],\n      b: this.imageData.data[i + 2],\n      a: this.imageData.data[i + 3]\n    };\n  }\n\n  crossing(particle) {\n    if (this.crossType === \"dead\") {\n      if (this.getBound(particle.p.x - this.x, particle.p.y - this.y))\n        particle.dead = true;\n      else particle.dead = false;\n    } else if (this.crossType === \"bound\") {\n      if (!this.getBound(particle.p.x - this.x, particle.p.y - this.y))\n        particle.v.negate();\n    }\n  }\n}\n","import ColorUtil from \"../utils/ColorUtil\";\nimport CircleZone from \"../zone/CircleZone\";\nimport PointZone from \"../zone/PointZone\";\nimport LineZone from \"../zone/LineZone\";\nimport RectZone from \"../zone/RectZone\";\n\nexport default {\n  addEventListener(proton, func) {\n    proton.addEventListener(\"PROTON_UPDATE_AFTER\", () => func());\n  },\n\n  getStyle(color = \"#ff0000\") {\n    const rgb = ColorUtil.hexToRgb(color);\n    return `rgba(${rgb.r}, ${rgb.g}, ${rgb.b}, 0.5)`;\n  },\n\n  drawZone(proton, canvas, zone, clear) {\n    const context = canvas.getContext(\"2d\");\n    const style = this.getStyle();\n\n    this.addEventListener(proton, () => {\n      if (clear) context.clearRect(0, 0, canvas.width, canvas.height);\n\n      if (zone instanceof PointZone) {\n        context.beginPath();\n        context.fillStyle = style;\n        context.arc(zone.x, zone.y, 10, 0, Math.PI * 2, true);\n        context.fill();\n        context.closePath();\n      } else if (zone instanceof LineZone) {\n        context.beginPath();\n        context.strokeStyle = style;\n        context.moveTo(zone.x1, zone.y1);\n        context.lineTo(zone.x2, zone.y2);\n        context.stroke();\n        context.closePath();\n      } else if (zone instanceof RectZone) {\n        context.beginPath();\n        context.strokeStyle = style;\n        context.drawRect(zone.x, zone.y, zone.width, zone.height);\n        context.stroke();\n        context.closePath();\n      } else if (zone instanceof CircleZone) {\n        context.beginPath();\n        context.strokeStyle = style;\n        context.arc(zone.x, zone.y, zone.radius, 0, Math.PI * 2, true);\n        context.stroke();\n        context.closePath();\n      }\n    });\n  },\n\n  drawEmitter(proton, canvas, emitter, clear) {\n    const context = canvas.getContext(\"2d\");\n    const style = this.getStyle();\n\n    this.addEventListener(proton, () => {\n      if (clear) context.clearRect(0, 0, canvas.width, canvas.height);\n\n      context.beginPath();\n      context.fillStyle = style;\n      context.arc(emitter.p.x, emitter.p.y, 10, 0, Math.PI * 2, true);\n      context.fill();\n      context.closePath();\n    });\n  }\n};\n","import Proton from \"./core/Proton\";\nimport Particle from \"./core/Particle\";\nimport Pool from \"./core/Pool\";\n\nimport Util from \"./utils/Util\";\nimport ColorUtil from \"./utils/ColorUtil\";\nimport MathUtil from \"./math/MathUtil\";\nimport Vector2D from \"./math/Vector2D\";\nimport Polar2D from \"./math/Polar2D\";\nimport Mat3 from \"./math/Mat3\";\nimport Span from \"./math/Span\";\nimport ArraySpan from \"./math/ArraySpan\";\nimport Rectangle from \"./math/Rectangle\";\nimport ease from \"./math/ease\";\n\nimport Rate from \"./initialize/Rate\";\nimport Initialize from \"./initialize/Initialize\";\nimport Life from \"./initialize/Life\";\nimport Position from \"./initialize/Position\";\nimport Velocity from \"./initialize/Velocity\";\nimport Mass from \"./initialize/Mass\";\nimport Radius from \"./initialize/Radius\";\nimport Body from \"./initialize/Body\";\n\nimport Behaviour from \"./behaviour/Behaviour\";\nimport Force from \"./behaviour/Force\";\nimport Attraction from \"./behaviour/Attraction\";\nimport RandomDrift from \"./behaviour/RandomDrift\";\nimport Gravity from \"./behaviour/Gravity\";\nimport Collision from \"./behaviour/Collision\";\nimport CrossZone from \"./behaviour/CrossZone\";\nimport Alpha from \"./behaviour/Alpha\";\nimport Scale from \"./behaviour/Scale\";\nimport Rotate from \"./behaviour/Rotate\";\nimport Color from \"./behaviour/Color\";\nimport Cyclone from \"./behaviour/Cyclone\";\nimport Repulsion from \"./behaviour/Repulsion\";\nimport GravityWell from \"./behaviour/GravityWell\";\n\nimport Emitter from \"./emitter/Emitter\";\nimport BehaviourEmitter from \"./emitter/BehaviourEmitter\";\nimport FollowEmitter from \"./emitter/FollowEmitter\";\n\nimport CanvasRenderer from \"./render/CanvasRenderer\";\nimport DomRenderer from \"./render/DomRenderer\";\nimport EaselRenderer from \"./render/EaselRenderer\";\nimport PixelRenderer from \"./render/PixelRenderer\";\nimport PixiRenderer from \"./render/PixiRenderer\";\nimport WebGLRenderer from \"./render/WebGLRenderer\";\nimport CustomRenderer from \"./render/CustomRenderer\";\n\nimport Zone from \"./zone/Zone\";\nimport LineZone from \"./zone/LineZone\";\nimport CircleZone from \"./zone/CircleZone\";\nimport PointZone from \"./zone/PointZone\";\nimport RectZone from \"./zone/RectZone\";\nimport ImageZone from \"./zone/ImageZone\";\n\nimport Debug from \"./debug/Debug\";\n\n// namespace\nProton.Particle = Particle;\nProton.Pool = Pool;\n\nProton.Util = Util;\nProton.ColorUtil = ColorUtil;\nProton.MathUtil = MathUtil;\nProton.Vector2D = Proton.Vector = Vector2D;\nProton.Polar2D = Proton.Polar = Polar2D;\nProton.ArraySpan = ArraySpan;\nProton.Rectangle = Rectangle;\nProton.Rate = Rate;\nProton.ease = ease;\nProton.Span = Span;\nProton.Mat3 = Mat3;\nProton.getSpan = (a, b, center) => new Span(a, b, center);\nProton.createArraySpan = ArraySpan.createArraySpan;\n\nProton.Initialize = Proton.Init = Initialize;\nProton.Life = Proton.L = Life;\nProton.Position = Proton.P = Position;\nProton.Velocity = Proton.V = Velocity;\nProton.Mass = Proton.M = Mass;\nProton.Radius = Proton.R = Radius;\nProton.Body = Proton.B = Body;\n\nProton.Behaviour = Behaviour;\nProton.Force = Proton.F = Force;\nProton.Attraction = Proton.A = Attraction;\nProton.RandomDrift = Proton.RD = RandomDrift;\nProton.Gravity = Proton.G = Gravity;\nProton.Collision = Collision;\nProton.CrossZone = CrossZone;\nProton.Alpha = Alpha;\nProton.Scale = Proton.S = Scale;\nProton.Rotate = Rotate;\nProton.Color = Color;\nProton.Repulsion = Repulsion;\nProton.Cyclone = Cyclone;\nProton.GravityWell = GravityWell;\n\nProton.Emitter = Emitter;\nProton.BehaviourEmitter = BehaviourEmitter;\nProton.FollowEmitter = FollowEmitter;\n\nProton.Zone = Zone;\nProton.LineZone = LineZone;\nProton.CircleZone = CircleZone;\nProton.PointZone = PointZone;\nProton.RectZone = RectZone;\nProton.ImageZone = ImageZone;\n\nProton.CanvasRenderer = CanvasRenderer;\nProton.DomRenderer = DomRenderer;\nProton.EaselRenderer = EaselRenderer;\nProton.PixiRenderer = PixiRenderer;\nProton.PixelRenderer = PixelRenderer;\nProton.WebGLRenderer = Proton.WebGlRenderer = WebGLRenderer;\nProton.CustomRenderer = CustomRenderer;\n\nProton.Debug = Debug;\nUtil.assign(Proton, ease);\n\n// export\nexport default Proton;\n","/**\n *  RAFManager requestAnimationFrame Manager\n * \n *  Simple package\n * \n *  CODE:\n * \n * \t\t// Add to\n *  \t-- RAFManager.add(func);\n * \n *   \t// Add and carry parameters\n *  \t-- const func = data =>{ console.log(data) };\n *  \t-- RAFManager.add(func, 25, { msg:'hello world!' }); \n * \t\t\n * \t\t// remove\n *  \t-- RAFManager.remove(func);\n *  \t-- RAFManager.stop();\t\n*/\n\n// simple polyfill by https://gist.github.com/paulirish/1579671\n(function () {\n\tlet lastTime = 0;\n\tlet vendors = ['ms', 'moz', 'webkit', 'o'];\n\tfor (let x = 0; x < vendors.length && !window.requestAnimationFrame; ++x) {\n\t\twindow.requestAnimationFrame = window[vendors[x] + 'RequestAnimationFrame'];\n\t\twindow.cancelAnimationFrame = window[vendors[x] + 'CancelAnimationFrame']\n\t\t\t|| window[vendors[x] + 'CancelRequestAnimationFrame'];\n\t}\n}());\n\nconst RAFManager = {\n\ttimer: 0,\n\tstate: 'stop',\n\tanimations: [],\n\n\tadd(callback, fps = 60, param = null) {\n\t\tconst n = 60 / fps;\n\t\tconst aniData = { callback, fps, n, param, i: 0 };\n\t\tthis.animations.push(aniData);\n\t\tif (this.animations.length >= 1) this.start();\n\n\t\treturn this;\n\t},\n\n\tgetIndex(callback) {\n\t\tfor (let i = 0; i < this.animations.length; i++) {\n\t\t\tconst aniData = this.animations[i];\n\t\t\tif (aniData.callback === callback) return i;\n\t\t}\n\n\t\treturn -1;\n\t},\n\n\tremove(callback) {\n\t\tconst index = this.getIndex(callback);\n\t\tif (index < 0) return;\n\n\t\tthis.deleteMap(callback);\n\t\tif (this.animations.length === 0) this.stop();\n\n\t\treturn this;\n\t},\n\n\tdeleteMap(callback) {\n\t\tconst index = this.getIndex(callback);\n\t\tconst aniData = this.animations[index];\n\t\tfor (let key in aniData) delete aniData[key];\n\n\t\tthis.animations.splice(index, 1);\n\t},\n\n\tstart() {\n\t\tif (this.state === 'start') return;\n\n\t\tthis.state = 'start';\n\t\tthis.tick();\n\t\treturn this;\n\t},\n\n\tstop() {\n\t\tif (this.state === 'stop') return;\n\n\t\tthis.state = 'stop';\n\t\tcancelAnimationFrame(this.timer);\n\t\treturn this;\n\t},\n\n\ttick() {\n\t\tthis.timer = requestAnimationFrame(() => { this.tick(); });\n\n\t\tfor (let i = 0; i < this.animations.length; i++) {\n\t\t\tconst aniData = this.animations[i];\n\t\t\tconst callback = aniData.callback;\n\t\t\tconst param = aniData.param;\n\n\t\t\taniData.i++;\n\t\t\tif (aniData.i >= aniData.n) {\n\t\t\t\tcallback(param);\n\t\t\t\taniData.i = 0;\n\t\t\t}\n\t\t}\n\t}\n}\n\nexport default RAFManager;"],"names":["Rand","list","probability","target","push","calculation","total","i","this","length","obj","val","a","b","Math","random","Canvas","props","_iid","_oid","size","width","height","canvasRef","React","setTimeout","initCanvas","resize","_this2","bind","addEventListener","canvas","getCanvas","onCanvasDidMount","globalCompositeOperation","getContext","setCanvasSize","heartbeatDetectionCanvasSize","onCanvasInited","current","setInterval","_this3","clientHeight","onResize","removeEventListener","e","clientWidth","bg","style","Object","assign","onMouseDown","className","handleMouseDown","getStyle","getColor","color","c","hex","result","exec","parseInt","hexToRgb","r","g","Ball","renderProton","_this","createProton","createMiniEmitter","proton","destroy","context","Proton","emitter","rate","num","addInitialize","addBehaviour","customDeadBehaviour","p","x","min","max","y","emit","addEmitter","renderer","onProtonUpdate","fillStyle","fillRect","addRenderer","particle","radius","miniEmitteing","dead","miniEmitter","radiusInitialize","colorBehaviour","reset","update","Color","colors","Infinity","crossZoneBehaviour","zone","renderers","key","defaultVal","config","Array","isArray","getProp","rps","mass","life","body","position","v","tha","alpha","getArrProp","scale","cross","rotate","f","emitterV","pos","alphaB","scaleB","colorB","createRenderer","onUpdate","onParticleCreated","onParticleUpdate","operation","Lines","backgroundColor","damping","mouseObj","attractionBehaviour","beginPath","strokeStyle","lineWidth","moveTo","old","lineTo","closePath","stroke","Thick","hue","index","colorTemplate","repulsion","attraction","data","begin","PI","replace","cos","arc","fill","targetPosition","Square","preEmit","clearRect","w","h","save","globalAlpha","translate","rotation","rect","restore","Cobweb","pointZone","onProtonUpdateAfter","particles","j","pA","pB","dis","distanceTo","Circle","Tadpole","mouseInfo","points","fillPointsData","unshift","pop","drawTadpoleHead","drawTadpoleTail","l","linearEvaluation","A","COLOR","Polygon","createEmitter","count","onParticleDead","drawPolygon","sin","mainEmitter","once","gravity","pool","get","completed","radiusInit","expire","removeEmitter","oldRadius","emitterCount","Fountain","createCustomBehaviour","gradient","getGradient","add","ParticlesBg","set","getResult","type","String","toLowerCase","Custom","getRandom","getBgParticles","Component","MathUtil","PI_180","N180_PI","isInfinity","floor","center","isInt","randomAToB","toString","slice","randomZone","k","digits","pow","toColor16","o","t","constructor","value","enumerable","writable","configurable","Span","Util","getRandFromArray","randomFloating","pan","getValue","initValue","d","tx","ty","angleInRadians","s","sx","sy","a00","a01","a02","a10","a11","a12","a20","a21","a22","b00","b01","b02","b10","b11","b12","b20","b21","b22","createCanvas","id","dom","document","createElement","opacity","transform","marginLeft","marginTop","div","willChange","css3","bkey","charAt","toUpperCase","substr","imgsCache","canvasCache","canvasId","_","image","drawImage","imagedata","getImageData","img","callback","param","src","Image","onload","WebGLUtil","DomUtil","defaults","prototype","call","arr","toArray","emptyObject","ignore","indexOf","args","apply","concat","conf","hasProp","copy","prop","hasOwnProperty","getSpanValue","ImgUtil","source","idsMap","Puid","_index","_cache","uid","getIdFromCache","isBody","isInner","Pool","params","__puid","getId","cache","createOrClone","getCache","create","classApply","clone","Stats","getEmitter","getRenderer","str","emitters","emitSpeed","getEmitterPos","initializes","concatArr","behaviours","name","getCreatedNumber","getCount","container","innerHTML","cssText","join","parentNode","appendChild","emitterIndex","rendererIndex","cpool","round","EventDispatcher","listener","_listeners","splice","listeners","handler","dispatchEvent","hasEventListener","removeAllEventListeners","Integration","time","eulerIntegrate","sleep","multiplyScalar","clear","render","init","remove","parent","EMITTER_ADDED","EMITTER_REMOVED","_fps","PROTON_UPDATE","USE_CLOCK","then","Date","getTime","now","elapsed","amendChangeTabsBug","emittersUpdate","DEFAULT_INTERVAL","PROTON_UPDATE_AFTER","_interval","destroyAll","destroyOther","getAllParticles","fps","integrationType","stats","EULER","integrator","MEASURE","RK2","PARTICLE_CREATED","PARTICLE_UPDATE","PARTICLE_SLEEP","PARTICLE_DEAD","C","Rgb","L","easeLinear","easeOutQuad","easeInOutQuad","easeInCubic","easeOutCubic","easeInOutCubic","easeInQuart","easeOutQuart","easeInOutQuart","easeInSine","PI_2","easeInExpo","easeOutExpo","sqrt","easeOutCirc","easeInOutCirc","easeInBack","easeOutBack","easeInOutBack","getEasing","ease","Vector2D","atan2","addVectors","subVectors","divideScalar","distanceToSquared","dx","dy","Particle","age","sprite","energy","easing","rgb","removeAllBehaviours","applyBehaviours","applyBehaviour","behaviour","parents","initialize","P","emptyArray","N","setProp","hex16","substring","rgbToHex","rbg","Number","Polar2D","getX","getY","abs","Mat3","mat3","mat","Float32Array","mat1","mat2","m","vec","ArraySpan","_arr","randomColor","W","Rectangle","right","bottom","Rate","startTime","nextTime","timePan","numPan","J","numpan","timepan","setSpanValue","Initialize","Life","lifePan","Zone","vector","crossType","alert","PointZone","error","st","Position","getPosition","Velocity","rpan","thapan","rPan","thaPan","vr","polar2d","normalizeVelocity","Mass","massPan","Radius","Body","imageTarget","inner","Behaviour","force","removeBehaviour","mt","Force","fx","fy","normalizeForce","calculate","Attraction","normalizeValue","radiusSq","attractionForce","lengthSq","sub","normalize","RandomDrift","driftX","driftY","delay","panFoce","addXY","Et","Gravity","Collision","collisionPool","delta","overlap","totalMass","averageMass1","averageMass2","distance","newPool","otherParticle","n","CrossZone","crossing","Alpha","same","alphaA","It","Scale","scaleA","Rotate","rotationA","rotationB","getDirection","influence","createArraySpan","colorA","ColorUtil","CHANGING","Cyclone","angle","span","setAngleAndForce","cangle","cyclone","Repulsion","Ht","GravityWell","centerPoint","distanceVec","factor","distanceSq","bindEmitter","setVectorVal","degreeTransform","Emitter","totalTime","stoped","emitTime","isNaN","oldStoped","oldEmitTime","oldTotalTime","initAll","rest","initializer","arguments","emitting","integrate","dispatch","event","bindEvent","createParticle","setupParticle","addBehaviours","stop","removeAllInitializers","BehaviourEmitter","selfBehaviours","FollowEmitter","mousemoveHandler","mousemove","mousedownHandler","mousedown","mouseupHandler","mouseup","mouseTarget","_allowEmitting","layerX","layerY","offsetX","offsetY","babelHelpers.get","Jt","window","initEventHandler","BaseRenderer","thinkness","_protonUpdateHandler","_protonUpdateAfterHandler","_emitterAddedHandler","onEmitterAdded","_emitterRemovedHandler","onEmitterRemoved","_particleCreatedHandler","_particleUpdateHandler","_particleDeadHandler","te","element","circleConf","isCircle","initHandler","CanvasRenderer","addImg2Body","drawCircle","bufContext","buffer","createBuffer","bufferCache","DomRenderer","bodyReady","transform3d","removeChild","babelHelpers.typeof","createCircle","createSprite","createDiv","borderRadius","borderColor","borderWidth","url","backgroundImage","createBody","EaselRenderer","addChild","scaleX","scaleY","graphics","regX","regY","createjs","Graphics","beginStroke","beginFill","shape","Shape","PixelRenderer","rectangle","imageData","createImageData","putImageData","setPixel","elementwidth","PIXIClass","PixiRenderer","PIXI","Sprite","createFromImage","from","fromImage","blendMode","setColor","tint","getHex16FromParticle","anchor","endFill","setPIXI","MStack","mats","multiply","ye","WebGLRenderer","gl","antialias","stencil","depth","initVar","setMaxRadius","initShaders","initBuffers","blendEquation","FUNC_ADD","blendFunc","SRC_ALPHA","ONE_MINUS_SRC_ALPHA","enable","BLEND","CustomRenderer","umat","smat","mstack","viewport","circleCanvasURL","texturebuffers","B","fs","VERTEX_SHADER","shader","createShader","FRAGMENT_SHADER","shaderSource","compileShader","getShaderParameter","COMPILE_STATUS","getShaderInfoLog","fragmentShader","getShader","getFragmentShader","vertexShader","getVertexShader","sprogram","createProgram","attachShader","linkProgram","getProgramParameter","LINK_STATUS","useProgram","vpa","getAttribLocation","tca","enableVertexAttribArray","tMatUniform","getUniformLocation","samplerUniform","useTex","uniform1i","idx","unitIBuffer","bindBuffer","ELEMENT_ARRAY_BUFFER","bufferData","Uint16Array","STATIC_DRAW","ids","unitI33","stripBuffer","raidus","circleCanvasRadius","toDataURL","_w","_h","_width","_height","_scaleX","_scaleY","createTexture","texture","vcBuffer","tcBuffer","ARRAY_BUFFER","bindTexture","TEXTURE_2D","texImage2D","RGBA","UNSIGNED_BYTE","texParameteri","TEXTURE_MAG_FILTER","LINEAR","TEXTURE_MIN_FILTER","LINEAR_MIPMAP_NEAREST","generateMipmap","textureLoaded","textureWidth","textureHeight","tmat","imat","oldScale","drawImg2Canvas","updateMatrix","uniform3f","uniformMatrix3fv","top","vertexAttribPointer","FLOAT","drawElements","TRIANGLES","UNSIGNED_SHORT","moveOriginMatrix","translationMatrix","angel","rotationMatrix","scaleMatrix","matrix","inverse","LineZone","x1","y1","dot","xxyy","tha2","oldx","oldy","maxx","minx","maxy","miny","direction","rangeOut","getDistance","getSymmetric","ge","x2","y2","getLength","CircleZone","PIx2","randomRadius","RectZone","ImageZone","vectors","setVectors","length1","length2","getBound","negate","func","drawRect","Vector","Polar","getSpan","Init","V","M","R","F","RD","G","S","WebGlRenderer","Debug","vendors","requestAnimationFrame","cancelAnimationFrame","timer","state","animations","aniData","start","getIndex","deleteMap","tick"],"sourceRoot":""}